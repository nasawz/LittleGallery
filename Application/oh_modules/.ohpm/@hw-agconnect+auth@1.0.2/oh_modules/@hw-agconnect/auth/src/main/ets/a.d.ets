import { Auth, AuthUser, CredentialInfo, GRS_TYPE, SignInParam, SignInResult, Token, VerifyCodeParam, VerifyCodeResult } from "./b";
import { UserManager } from "./g/h";
import { common } from '@kit.AbilityKit';
import { cloudCommon } from '@kit.CloudFoundationKit';
export declare class AuthImpl implements Auth {
    private static instance;
    userManager: UserManager | undefined;
    region: string | undefined;
    appContext: common.Context | undefined;
    json: object | string | undefined;
    private authBackend;
    private clientSecret;
    private clientId;
    private decryptMark;
    static getInstance(): AuthImpl;
    static getAuthInstance(): Auth;
    getAuthProvider(): cloudCommon.AuthProvider;
    requestVerifyCode(verifyCodeParam: VerifyCodeParam): Promise<VerifyCodeResult>;
    createUser(credentialInfo: CredentialInfo): Promise<SignInResult>;
    resetPassword(credentialInfo: CredentialInfo): Promise<void>;
    signIn(param: SignInParam): Promise<SignInResult>;
    signInAnonymously(): Promise<SignInResult>;
    deleteUser(): Promise<void>;
    signOut(): Promise<void>;
    getCurrentUser(): Promise<AuthUser | null>;
    init(applicationContext: Context, json: string): void;
    setRegion(region: string): Promise<void>;
    getGrsConfig(type: GRS_TYPE, region?: string): string;
    getProductId(): string;
    getAppId(): string;
    getClientId(): string;
    setClientSecret(clientSecret: string): void;
    setClientId(clientId: string): void;
    getClientSecret(): Promise<string>;
    getToken(refresh?: boolean, region?: string): Promise<Token>;
    getRegion(): string;
    private convertToUserInfo;
    private getDefaultRegion;
    private getString;
    private getDecryptString;
}
declare const _default: Auth;
export default _default;
