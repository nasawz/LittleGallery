‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄x@var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Matrix4 from '@ohos.matrix4';
import RectF from './RectF';
class PhotoView extends ViewV2 {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda, extraInfo) {
        super(parent, elmtId, extraInfo);
        this.initParam("model", (params && "model" in params) ? params.model : new PhotoView.Model());
        this.finalizeConstruction();
    }
    zoomTo(scale, durationMs) {
        let currentScale = 0;
        if (scale > this.model.getMaximumScale()) {
            currentScale = this.model.getMaximumScale();
        }
        else if (scale < this.model.getMinimumScale()) {
            currentScale = this.model.getMinimumScale();
        }
        else {
            currentScale = scale;
        }
        Context.animateTo({
            duration: durationMs,
            tempo: 0.5,
            curve: Curve.EaseInOut,
            delay: 0,
            iterations: 1,
            playMode: PlayMode.Normal,
            onFinish: () => {
            }
        }, () => {
            this.model.scale = currentScale;
            this.model.updateMatrix();
        });
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Flex.create({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center });
            Gesture.create(GesturePriority.Low);
            GestureGroup.create(GestureMode.Exclusive);
            TapGesture.create({ count: 2, fingers: 1 });
            TapGesture.onAction((event) => {
                console.debug("photo double tap:");
                if (this.model.isZoom) {
                    if (this.model.scale == this.model.scaleMax) {
                        this.model.scale = this.model.scaleMin;
                        this.model.childSpan = false;
                        this.model.resetMatrix();
                    }
                    else {
                        if (this.model.scale < this.model.scaleMax) {
                            this.model.scale = this.model.scaleMax;
                            this.model.panDirection = PanDirection.All;
                            this.model.swipeDirection = SwipeDirection.None;
                            this.model.childSpan = true;
                        }
                        else {
                            this.model.scale = this.model.scaleMin;
                            this.model.panDirection = PanDirection.None;
                            this.model.swipeDirection = this.model.cacheSwipeDirection;
                            this.model.childSpan = false;
                        }
                        if (this.model.animate) {
                            this.zoomTo(this.model.scale, this.model.mZoomDuration);
                        }
                        else {
                            this.model.updateMatrix();
                        }
                    }
                }
                if (this.model.matrixChangedListener != null) {
                    this.model.matrixChangedListener.onMatrixChanged(this.model.rect);
                }
                if (this.model.scaleChangeListener != null) {
                    this.model.scaleChangeListener.onScaleChange(this.model.scale, 0, 0);
                }
                if (this.model.doubleTapListener != null) {
                    this.model.doubleTapListener.onDoubleTap(event);
                }
            });
            TapGesture.pop();
            TapGesture.create({ count: 1, fingers: 1 });
            TapGesture.onAction((event) => {
                console.debug("photo single tap:");
                if (this.model.clickListener != null) {
                    this.model.clickListener.onClick(event);
                }
                if (!event || !event.fingerList || !event.fingerList[0]) {
                    return;
                }
                if (this.model.viewTapListener != null) {
                    this.model.viewTapListener.onViewTap(vp2px(event.fingerList[0].globalX), vp2px(event.fingerList[0].globalY));
                }
                if (this.model.rect != null) {
                    // Check to see if the user tapped on the photo
                    if (this.model.rect.contains(vp2px(event.fingerList[0].globalX), vp2px(event.fingerList[0].globalY))) {
                        let xResult = (vp2px(event.fingerList[0].globalX) - this.model.rect.left)
                            / this.model.rect.width();
                        let yResult = (vp2px(event.fingerList[0].globalY) - this.model.rect.top)
                            / this.model.rect.height();
                        if (this.model.photoTapListener != null) {
                            this.model.photoTapListener.onPhotoTap(xResult, yResult);
                        }
                    }
                    else {
                        if (this.model.outsidePhotoTapListener != null) {
                            this.model.outsidePhotoTapListener.onOutsidePhotoTap();
                        }
                    }
                }
            });
            TapGesture.pop();
            LongPressGesture.create();
            LongPressGesture.onAction((event) => {
                console.debug("PhotoView long press:");
                if (event && this.model.longPressListener != null) {
                    this.model.longPressListener.onLongPress(event);
                }
            });
            LongPressGesture.onActionEnd((event) => {
                // if (this.model.longPressListener != null) {
                //   this.model.longPressListener.onLongPress(event)
                // }
            });
            LongPressGesture.pop();
            PanGesture.create(this.model.panOption);
            PanGesture.onActionStart(() => {
                this.model.preOffsetX = this.model.offsetX;
                this.model.preOffsetY = this.model.offsetY;
            });
            PanGesture.onActionUpdate((event) => {
                if (this.model.isZoom && this.model.scale != this.model.scaleMin) {
                    this.model.setOffset(this.model.preOffsetX + event.offsetX * this.model.scale, this.model.preOffsetY + event.offsetY * this.model.scale);
                }
            });
            PanGesture.onActionEnd((event) => {
                if (this.model.viewDragListener != null) {
                    this.model.viewDragListener.onDrag(this.model.offsetX, this.model.offsetY);
                }
                if (this.model.matrixChangedListener != null) {
                    this.model.matrixChangedListener.onMatrixChanged(this.model.rect);
                }
            });
            PanGesture.pop();
            PinchGesture.create({ fingers: 2 });
            PinchGesture.onActionUpdate((event) => {
                if (this.model.isZoom) {
                    this.model.isPinch = true;
                    this.model.scale = this.model.currentScale * event.scale;
                    if (this.model.animate) {
                        this.zoomTo(this.model.scale, this.model.mZoomDuration);
                    }
                    else {
                        this.model.offsetX = 0;
                        this.model.offsetY = 0;
                        this.model.updateMatrix();
                    }
                }
            });
            PinchGesture.onActionEnd((event) => {
                this.model.isPinch = false;
                if (this.model.scale < this.model.scaleMin) {
                    this.model.scale = this.model.scaleMin;
                }
                if (this.model.scale > this.model.scaleMax) {
                    this.model.scale = this.model.scaleMax;
                }
                this.model.currentScale = this.model.scale;
                this.model.preOffsetX = 0;
                this.model.preOffsetY = 0;
                if (this.model.animate) {
                    this.zoomTo(this.model.scale, this.model.mZoomDuration);
                }
                else {
                    this.model.offsetX = 0;
                    this.model.offsetY = 0;
                    this.model.updateMatrix();
                }
                this.model.isZooming = (this.model.scale > 1);
                if (this.model.matrixChangedListener != null) {
                    this.model.matrixChangedListener.onMatrixChanged(this.model.rect);
                }
                if (this.model.scaleChangeListener != null) {
                    this.model.scaleChangeListener.onScaleChange(this.model.scale, 0, 0);
                }
            });
            PinchGesture.pop();
            SwipeGesture.create({ direction: this.model.swipeDirection });
            SwipeGesture.onAction((event) => {
                console.info("xxx photo swipe:");
            });
            SwipeGesture.pop();
            GestureGroup.pop();
            Gesture.pop();
            Flex.onTouch((event) => {
                if (event) {
                    if (event.type == TouchType.Up) {
                        //ÊîæÂ§ßÂõæÁâáÊãñÊãΩÂà∞ËæπÁïåÂêéÔºåÂêØÂä®ÊªëÂä®ÊâãÂäøÔºåÂ∞ÜÊãñÊãΩÊâãÂäøÊñπÂêëË∞ÉÊï¥
                        if (!this.model.vertical && this.model.enableSwipe) {
                            if (this.model.isBoundary_X) {
                                this.model.isBoundary_X = false;
                                console.log("xxx this.gestureConversion1 PanDirection.Vertical, SwipeDirection.Horizontal");
                                this.model.gestureConversion(PanDirection.Vertical, SwipeDirection.Horizontal);
                            }
                        }
                        else if (this.model.vertical && this.model.enableSwipe) {
                            if (this.model.isBoundary_Y) {
                                this.model.isBoundary_Y = false;
                                console.log("xxx this.gestureConversion2 PanDirection.Horizontal, SwipeDirection.Vertical");
                                this.model.gestureConversion(PanDirection.Horizontal, SwipeDirection.Vertical);
                            }
                        }
                    }
                }
            });
        }, Flex);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            Image.create(this.model.src);
            Image.alt(this.model.previewImage);
            Image.objectFit(this.model.imageFit);
            Image.transform(this.model.matrix);
            Image.interpolation(ImageInterpolation.Low);
            Image.draggable(false);
            Image.onComplete((event) => {
                this.model.sWidth = event.width;
                this.model.sHeight = event.height;
                this.model.componentWidth = event.componentWidth;
                this.model.componentHeight = event.componentHeight;
                this.model.contentHeight = event.contentHeight;
                this.model.contentWidth = event.contentWidth;
                this.model.contentOffSetX = event.contentOffsetX;
                this.model.contentOffSetY = event.contentOffsetY;
                const left = event.contentOffsetX;
                const top = event.contentOffsetY;
                const right = event.contentOffsetX + event.contentWidth;
                const bottom = event.contentOffsetY + event.contentHeight;
                this.model.rect = new RectF(left, top, right, bottom);
            });
        }, Image);
        Flex.pop();
    }
    updateStateVars(params) {
        if (params === undefined) {
            return;
        }
        if ("model" in params) {
            this.updateParam("model", params.model);
        }
    }
    rerender() {
        this.updateDirtyElements();
    }
}
__decorate([
    Param
], PhotoView.prototype, "model", void 0);
(function (PhotoView) {
    let Model = class Model {
        constructor() {
            this.src = '';
            this.sWidth = 0;
            this.sHeight = 0;
            this.componentWidth = 0;
            this.componentHeight = 0;
            this.baseAngle = 0;
            this.rotateAngle = 0;
            this.scale = 1;
            this.currentScale = 1;
            this.animate = false; //  ÊòØÂê¶ÂèØÊâãÂäøÁº©Êîæ
            this.imageFit = ImageFit.Contain;
            this.scaleMin = 1.0;
            this.scaleMed = 2;
            this.scaleMax = 3.0;
            this.isZoom = true;
            this.centerX = 0;
            this.centerY = 0;
            this.centerZ = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.preOffsetX = 0;
            this.preOffsetY = 0;
            this.verticalEnd = false;
            //Áº©ÊîæÂêé Âπ≥ÁßªÂà∞ÂçäÂ±èËæπÁïåÁöÑÂ°´ÂÖÖÂÄº
            this.startOffsetX = 10;
            this.startOffsetY = 23;
            this.photoTapListener = null;
            this.doubleTapListener = null;
            this.longPressListener = null;
            this.clickListener = null;
            this.matrixChangedListener = null;
            this.viewTapListener = null;
            this.viewDragListener = null;
            this.scaleChangeListener = null;
            this.outsidePhotoTapListener = null;
            this.onSwipeListener = null;
            this.rect = null;
            this.iterations = 0;
            this.mZoomDuration = 200;
            this.scaledDensity = 0;
            this.isZooming = false;
            this.dragging = false;
            this.contentHeight = 0;
            this.contentWidth = 0;
            this.contentOffSetX = 0;
            this.contentOffSetY = 0;
            this.previewImage = '';
            this.panDirection = PanDirection.None;
            this.swipeDirection = SwipeDirection.Horizontal;
            this.cacheSwipeDirection = SwipeDirection.Horizontal;
            this.childSpan = false;
            this.parentIsSwiper = false;
            this.matrix = Matrix4.identity()
                .rotate({
                x: 0,
                y: 0,
                z: 1,
                angle: this.rotateAngle
            })
                .translate({ x: this.offsetX, y: this.offsetY })
                .scale({ x: this.scale, y: this.scale });
            //ÊòØÂê¶ÊãñÊãΩÂà∞ËæπÁïå
            this.isBoundary_X = false;
            this.isBoundary_Y = false;
            // ÊòØÂê¶ÂèåÊåáÁº©Êîæ
            this.isPinch = false;
            //ÊòØÂê¶ÂûÇÁõ¥ÊªëÂä®
            this.vertical = false;
            //ÊòØÂê¶ÂêØÂä®ÊªëÂä®
            this.enableSwipe = true;
            // ÊãñÊãΩÊâãÂäøÂèÇÊï∞
            this.panOption = new PanGestureOptions({ fingers: 1, direction: PanDirection.None });
            console.debug("PhotoView create");
        }
        setVertical(isVertical) {
            this.vertical = isVertical;
            return this;
        }
        setImageURI(src) {
            this.src = src;
            return this;
        }
        setImageResource(src) {
            this.src = src;
            return this;
        }
        setImageElement(src) {
            this.src = src;
            return this;
        }
        setSwipeDirection(swipeDirection) {
            this.swipeDirection = swipeDirection;
            this.cacheSwipeDirection = swipeDirection;
            return this;
        }
        isParentSwiper(parentIsSwiper) {
            this.parentIsSwiper = parentIsSwiper;
            return this;
        }
        setImageFit(imageFit) {
            this.imageFit = imageFit;
            console.log("imageFit");
            return this;
        }
        setPreviewImage(src) {
            this.previewImage = src;
            return this;
        }
        setScale(scale, animate) {
            this.scale = scale;
            if (this.scale < this.scaleMin) {
                this.scale = this.scaleMin;
            }
            if (this.scale > this.scaleMax) {
                this.scale = this.scaleMax;
            }
            if (animate) {
                this.iterations = 1;
            }
            else {
                this.iterations = 0;
            }
            this.animate = animate;
            return this;
        }
        setZoomTransitionDuration(milliseconds) {
            this.mZoomDuration = milliseconds;
            return this;
        }
        getMinimumScale() {
            return this.scaleMin;
        }
        getMediumScale() {
            return this.scaleMed;
        }
        getMaximumScale() {
            return this.scaleMax;
        }
        getScale() {
            return this.scale;
        }
        setMinimumScale(minimumScale) {
            this.scaleMin = minimumScale;
            return this;
        }
        setMediumScale(mediumScale) {
            this.scaleMed = mediumScale;
            return this;
        }
        setMaximumScale(maximumScale) {
            this.scaleMax = maximumScale;
            return this;
        }
        setScaleLevels(minimumScale, mediumScale, maximumScale) {
            this.scaleMin = minimumScale;
            this.scaleMed = mediumScale;
            this.scaleMax = maximumScale;
            return this;
        }
        setBaseRotation(degrees) {
            this.rotateAngle = degrees % 360;
            this.setRotationBy(this.rotateAngle);
            return this;
        }
        setRotationTo(rotationDegree) {
            this.rotateAngle = rotationDegree % 360;
            this.matrix = Matrix4.identity()
                .rotate({
                x: 0,
                y: 0,
                z: 1,
                angle: this.rotateAngle
            });
            return this;
        }
        setRotationBy(rotationDegree) {
            this.rotateAngle = (this.rotateAngle + rotationDegree) % 360;
            this.matrix = Matrix4.identity()
                .rotate({
                x: 0,
                y: 0,
                z: 1,
                angle: this.rotateAngle
            });
            return this;
        }
        setRotationCenter(x, y, z) {
            this.centerX = z;
            this.centerY = y;
            this.centerZ = z;
            return this;
        }
        setZoomable(zoomable) {
            if (!zoomable) {
                this.scale = this.scaleMin;
                this.setImageFit(ImageFit.None);
                this.isZoom = false;
                return this;
            }
            this.isZoom = zoomable;
            return this;
        }
        isZoomEnabled() {
            return this.isZoom;
        }
        setImageOffset(pointX, pointY) {
            this.offsetX = pointX;
            this.offsetY = pointY;
            return this;
        }
        setOnClickListener(listener) {
            this.clickListener = listener;
            return this;
        }
        setOnLongClickListener(listener) {
            this.longPressListener = listener;
            return this;
        }
        setOnMatrixChangeListener(listener) {
            this.matrixChangedListener = listener;
            return this;
        }
        setOnPhotoTapListener(listener) {
            this.photoTapListener = listener;
            return this;
        }
        setOnViewTapListener(listener) {
            this.viewTapListener = listener;
            return this;
        }
        setOnViewDragListener(listener) {
            this.viewDragListener = listener;
            return this;
        }
        setOnScaleChangeListener(scaleChangeListener) {
            this.scaleChangeListener = scaleChangeListener;
            return this;
        }
        setOnOutsidePhotoTapListener(outsidePhotoTapListener) {
            this.outsidePhotoTapListener = outsidePhotoTapListener;
            return this;
        }
        setOnDoubleTapListener(onDoubleTapListener) {
            this.doubleTapListener = onDoubleTapListener;
            return this;
        }
        setOnSwipeListener(onSwipeListener) {
            this.onSwipeListener = onSwipeListener;
            return this;
        }
        updateMatrix() {
            if (!!this.rect) {
                const originLeft = this.contentOffSetX;
                const originTop = this.contentOffSetY;
                const originWidth = this.contentWidth;
                const originHeight = this.contentHeight;
                const scaledWidth = originWidth * this.scale;
                const scaledHeight = originHeight * this.scale;
                const centerXOffset = (scaledWidth - originWidth) / 2;
                const centerYOffset = (scaledHeight - originHeight) / 2;
                this.rect.left = originLeft + this.offsetX - centerXOffset;
                this.rect.top = originTop + this.offsetY - centerYOffset;
                this.rect.right = this.rect.left + scaledWidth + centerXOffset;
                this.rect.bottom = this.rect.top + scaledHeight + centerYOffset;
            }
            if (this.enableSwipe && !this.isPinch) {
                //ÂõæÁâáÊîæÂ§ßÊó∂Á¶ÅÁî®ÊªëÂä®ÊâãÂäøÔºåÂêØÂä®ÊãñÂä®ÊâãÂäø
                //ÂõæÁâáÂ§çÂéüÊó∂ÂêØÂä®ÊªëÂä®ÊâãÂäøÔºåÁ¶ÅÁî®ÊãñÂä®ÊâãÂäø
                if (this.scale == this.scaleMin) {
                    if (!this.vertical) {
                        console.log("xxx this.gestureConversion3 PanDirection.None, SwipeDirection.Horizontal");
                        this.gestureConversion(PanDirection.None, SwipeDirection.Horizontal);
                    }
                    else {
                        console.log("xxx this.gestureConversion4 PanDirection.None, SwipeDirection.Vertical");
                        this.gestureConversion(PanDirection.None, SwipeDirection.Vertical);
                    }
                }
                else {
                    console.log("xxx this.gestureConversion5 PanDirection.All, SwipeDirection.None");
                    this.gestureConversion(PanDirection.All, SwipeDirection.None);
                }
            }
            this.matrix = Matrix4.identity()
                .rotate({
                x: 0,
                y: 0,
                z: 1,
                angle: this.rotateAngle
            })
                .translate({ x: this.offsetX, y: this.offsetY, z: 1 })
                .scale({
                x: this.scale,
                y: this.scale,
                centerX: this.centerX,
                centerY: this.centerY
            });
            if (this.onSwipeListener != null) {
                this.onSwipeListener.onSwipeListener(this.childSpan);
            }
        }
        //ËÆæÁΩÆÊªëÂä®ÊâãÂäø‰∏éÊãñÊãΩÊâãÂäøÁöÑÊñπÂêë
        gestureConversion(panDirection, swipeDirection, vertical) {
            this.panOption.setDirection(panDirection);
            if (swipeDirection !== undefined) {
                this.swipeDirection = swipeDirection;
                if (vertical !== undefined) {
                    this.vertical = vertical;
                }
                if (!this.enableSwipe) {
                    this.enableSwipe = true;
                }
            }
            else {
                this.enableSwipe = false;
                this.swipeDirection = SwipeDirection.None;
            }
            return this;
        }
        resetMatrix() {
            this.scale = 1;
            this.currentScale = 1;
            this.centerX = 0;
            this.centerY = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.rotateAngle = 0;
            this.panDirection = PanDirection.None;
            this.swipeDirection = this.cacheSwipeDirection;
            this.updateMatrix();
        }
        getSuppMatrix(matrix) {
            this.matrix;
        }
        setSuppMatrix(matrix) {
            this.matrix = matrix;
            return this;
        }
        isScaling() {
            return this.scale != 1;
        }
        isDragging() {
            return this.offsetX != 0 || this.offsetY != 0;
        }
        getRectF() {
            return this.rect;
        }
        setOffset(offsetX, offsetY) {
            let maxOffsetX = (this.contentWidth * this.scale - this.componentWidth) / 2 / this.scale + 10;
            let maxOffsetY = (this.contentHeight * this.scale - this.componentHeight) / 2 / this.scale + 10;
            console.log("xxx maxOffsetX = " + maxOffsetX);
            if (this.contentWidth * this.scale > this.componentWidth) {
                this.offsetX = offsetX;
                if (this.offsetX > maxOffsetX) {
                    //Â∑¶Ëæπ
                    this.offsetX = maxOffsetX;
                    this.isBoundary_X = true;
                }
                else if (this.offsetX < -maxOffsetX) {
                    //Âè≥Ëæπ
                    this.offsetX = -maxOffsetX;
                    this.isBoundary_X = true;
                }
            }
            if (this.contentHeight * this.scale > this.componentHeight) {
                this.offsetY = offsetY;
                if (this.offsetY > maxOffsetY) {
                    this.offsetY = maxOffsetY;
                    this.isBoundary_Y = true;
                }
                else if (this.offsetY < -maxOffsetY) {
                    this.offsetY = -maxOffsetY;
                    this.isBoundary_Y = true;
                }
            }
            this.updateMatrix();
        }
    };
    __decorate([
        Trace
    ], Model.prototype, "src", void 0);
    __decorate([
        Trace
    ], Model.prototype, "sWidth", void 0);
    __decorate([
        Trace
    ], Model.prototype, "sHeight", void 0);
    __decorate([
        Trace
    ], Model.prototype, "componentWidth", void 0);
    __decorate([
        Trace
    ], Model.prototype, "componentHeight", void 0);
    __decorate([
        Trace
    ], Model.prototype, "baseAngle", void 0);
    __decorate([
        Trace
    ], Model.prototype, "rotateAngle", void 0);
    __decorate([
        Trace
    ], Model.prototype, "scale", void 0);
    __decorate([
        Trace
    ], Model.prototype, "currentScale", void 0);
    __decorate([
        Trace
    ], Model.prototype, "animate", void 0);
    __decorate([
        Trace
    ], Model.prototype, "imageFit", void 0);
    __decorate([
        Trace
    ], Model.prototype, "scaleMin", void 0);
    __decorate([
        Trace
    ], Model.prototype, "scaleMed", void 0);
    __decorate([
        Trace
    ], Model.prototype, "scaleMax", void 0);
    __decorate([
        Trace
    ], Model.prototype, "isZoom", void 0);
    __decorate([
        Trace
    ], Model.prototype, "centerX", void 0);
    __decorate([
        Trace
    ], Model.prototype, "centerY", void 0);
    __decorate([
        Trace
    ], Model.prototype, "centerZ", void 0);
    __decorate([
        Trace
    ], Model.prototype, "offsetX", void 0);
    __decorate([
        Trace
    ], Model.prototype, "offsetY", void 0);
    __decorate([
        Trace
    ], Model.prototype, "preOffsetX", void 0);
    __decorate([
        Trace
    ], Model.prototype, "preOffsetY", void 0);
    __decorate([
        Trace
    ], Model.prototype, "verticalEnd", void 0);
    __decorate([
        Trace
    ], Model.prototype, "startOffsetX", void 0);
    __decorate([
        Trace
    ], Model.prototype, "startOffsetY", void 0);
    __decorate([
        Trace
    ], Model.prototype, "rect", void 0);
    __decorate([
        Trace
    ], Model.prototype, "iterations", void 0);
    __decorate([
        Trace
    ], Model.prototype, "mZoomDuration", void 0);
    __decorate([
        Trace
    ], Model.prototype, "scaledDensity", void 0);
    __decorate([
        Trace
    ], Model.prototype, "isZooming", void 0);
    __decorate([
        Trace
    ], Model.prototype, "dragging", void 0);
    __decorate([
        Trace
    ], Model.prototype, "contentHeight", void 0);
    __decorate([
        Trace
    ], Model.prototype, "contentWidth", void 0);
    __decorate([
        Trace
    ], Model.prototype, "contentOffSetX", void 0);
    __decorate([
        Trace
    ], Model.prototype, "contentOffSetY", void 0);
    __decorate([
        Trace
    ], Model.prototype, "previewImage", void 0);
    __decorate([
        Trace
    ], Model.prototype, "panDirection", void 0);
    __decorate([
        Trace
    ], Model.prototype, "swipeDirection", void 0);
    __decorate([
        Trace
    ], Model.prototype, "cacheSwipeDirection", void 0);
    __decorate([
        Trace
    ], Model.prototype, "childSpan", void 0);
    __decorate([
        Trace
    ], Model.prototype, "parentIsSwiper", void 0);
    __decorate([
        Trace
    ], Model.prototype, "matrix", void 0);
    Model = __decorate([
        ObservedV2
    ], Model);
    PhotoView.Model = Model;
})(PhotoView || (PhotoView = {}));
export { PhotoView };
//# sourceMappingURL=PhotoView.js.map¬íŸj hvigor_ignore__Applications_DevEco-Studio.app_Contents_sdk_default_openharmony_ets_api_@ohos.matrix4.d.tsŸ™/Users/wangzhe/DevEcoStudioProjects/LittleGallery/Application/oh_modules/.ohpm/@ohos+photoview@2.1.0/oh_modules/@ohos/photoview/src/main/ets/components/mainpage/RectF.etsŸÆ/Users/wangzhe/DevEcoStudioProjects/LittleGallery/Application/oh_modules/.ohpm/@ohos+photoview@2.1.0/oh_modules/@ohos/photoview/src/main/ets/components/mainpage/PhotoView.ets‘rBô±isLocalDependencyØisNodeEntryFileßpkgPathßpkgName™pkgVersion±belongProjectPath±dependencyPkgInfo¨shouldEmitJsØhostModulesInfo¬¬Ÿ/Users/wangzhe/DevEcoStudioProjects/LittleGallery/Application/oh_modules/.ohpm/@ohos+photoview@2.1.0/oh_modules/@ohos/photoviewØ@ohos/photoview•2.1.0Ÿ=/Users/wangzhe/DevEcoStudioProjects/LittleGallery/Application‘rCíßpkgName™pkgVersionØ@ohos/photoview•2.1.0√ê√⁄f)/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Matrix4 from '@ohos.matrix4';
import display from '@ohos.display';
import RectF from './RectF'

declare type ResourceStr = string | Resource | PixelMap;

export interface OnSwipeListener {
  onSwipeListener(ableSwipe: boolean): void;
}

export interface OnPhotoTapListener {
  /**
   * A callback to receive where the user taps on a photo. You will only receive a callback if
   * the user taps on the actual photo, tapping on 'whitespace' will be ignored.
   *
   * @param x    where the user tapped from the of the Drawable, as percentage of the
   *             Drawable width.
   * @param y    where the user tapped from the top of the Drawable, as percentage of the
   *             Drawable height.
   */
  onPhotoTap(x: number, y: number): void;
}

export interface OnDoubleTapListener {

  onSingleTapConfirmed(event: GestureEvent): void;

  onDoubleTap(event: GestureEvent): void;

}

export interface OnLongPressListener {
  onLongPress(event: GestureEvent): void;
}


export interface OnMatrixChangedListener {
  /**
   * Callback for when the Matrix displaying the Drawable has changed. This could be because
   * the View's bounds have changed, or the user has zoomed.
   *
   * @param rect - Rectangle displaying the Drawable's new bounds.
   */
  onMatrixChanged(rect: RectF | null): void;
}

export interface OnScaleChangedListener {
  /**
   * Callback for when the scale changes
   *
   * @param scaleFactor the scale factor (less than 1 for zoom out, greater than 1 for zoom in)
   * @param focusX      focal point X position
   * @param focusY      focal point Y position
   */
  onScaleChange(scaleFactor: number, focusX: number, focusY: number): void;
}

export interface OnOutsidePhotoTapListener {
  onOutsidePhotoTap(): void;
}

export interface OnViewDragListener {

  /**
   * Callback for when the photo is experiencing a drag event. This cannot be invoked when the
   * user is scaling.
   *
   * @param dx The change of the coordinates in the x-direction
   * @param dy The change of the coordinates in the y-direction
   */
  onDrag(dx: number, dy: number): void;
}

export interface OnViewTapListener {

  /**
   * A callback to receive where the user taps on a ImageView. You will receive a callback if
   * the user taps anywhere on the view, tapping on 'whitespace' will not be ignored.
   *
   * @param x    - where the user tapped from the left of the View.
   * @param y    - where the user tapped from the top of the View.
   */

  onViewTap(x: number, y: number): void;

}


export interface OnClickListener {
  onClick(event: GestureEvent): void;
}

@ComponentV2
struct PhotoView {
  @Param model: PhotoView.Model = new PhotoView.Model()

  public zoomTo(scale: number, durationMs: number): void {
    let currentScale = 0;
    if (scale > this.model.getMaximumScale()) {
      currentScale = this.model.getMaximumScale()
    } else if (scale < this.model.getMinimumScale()) {
      currentScale = this.model.getMinimumScale()
    } else {
      currentScale = scale;
    }
    animateTo({
      duration: durationMs,
      tempo: 0.5,
      curve: Curve.EaseInOut,
      delay: 0,
      iterations: 1,
      playMode: PlayMode.Normal,
      onFinish: () => {
      }
    }, () => {
      this.model.scale = currentScale;
      this.model.updateMatrix();
    })
  }

  build() {
    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
      Image(this.model.src)
        .alt(this.model.previewImage)
        .objectFit(this.model.imageFit)
        .transform(this.model.matrix)
        .interpolation(ImageInterpolation.Low)
        .draggable(false)
        .onComplete((event: ESObject) => {
          this.model.sWidth = event.width;
          this.model.sHeight = event.height;
          this.model.componentWidth = event.componentWidth;
          this.model.componentHeight = event.componentHeight;
          this.model.contentHeight = event.contentHeight;
          this.model.contentWidth = event.contentWidth;
          this.model.contentOffSetX = event.contentOffsetX;
          this.model.contentOffSetY = event.contentOffsetY;

          const left: number = event.contentOffsetX;
          const top: number = event.contentOffsetY;
          const right: number = event.contentOffsetX + event.contentWidth;
          const bottom: number = event.contentOffsetY + event.contentHeight;
          this.model.rect = new RectF(left, top, right, bottom)
        })
    }
    .gesture(
      GestureGroup(GestureMode.Exclusive,
        TapGesture({ count: 2, fingers: 1 })
          .onAction((event: GestureEvent) => {
            console.debug("photo double tap:")
            if (this.model.isZoom) {
              if (this.model.scale == this.model.scaleMax) {
                this.model.scale = this.model.scaleMin
                this.model.childSpan = false;
                this.model.resetMatrix();
              } else {
                if (this.model.scale < this.model.scaleMax) {
                  this.model.scale = this.model.scaleMax
                  this.model.panDirection = PanDirection.All
                  this.model.swipeDirection = SwipeDirection.None
                  this.model.childSpan = true;
                } else {
                  this.model.scale = this.model.scaleMin
                  this.model.panDirection = PanDirection.None
                  this.model.swipeDirection = this.model.cacheSwipeDirection
                  this.model.childSpan = false;
                }
                if (this.model.animate) {
                  this.zoomTo(this.model.scale, this.model.mZoomDuration)
                } else {
                  this.model.updateMatrix();
                }
              }
            }
            if (this.model.matrixChangedListener != null) {
              this.model.matrixChangedListener.onMatrixChanged(this.model.rect)
            }
            if (this.model.scaleChangeListener != null) {
              this.model.scaleChangeListener.onScaleChange(this.model.scale, 0, 0)
            }
            if (this.model.doubleTapListener != null) {
              this.model.doubleTapListener.onDoubleTap(event)
            }
          }),
        TapGesture({ count: 1, fingers: 1 })
          .onAction((event: GestureEvent) => {
            console.debug("photo single tap:")
            if (this.model.clickListener != null) {
              this.model.clickListener.onClick(event);
            }
            if (!event || !event.fingerList || !event.fingerList[0]) {
              return;
            }
            if (this.model.viewTapListener != null) {
              this.model.viewTapListener.onViewTap(vp2px(event.fingerList[0].globalX),
                vp2px(event.fingerList[0].globalY))
            }
            if (this.model.rect != null) {
              // Check to see if the user tapped on the photo
              if (this.model.rect.contains(vp2px(event.fingerList[0].globalX), vp2px(event.fingerList[0].globalY))) {
                let xResult: number = (vp2px(event.fingerList[0].globalX) - this.model.rect.left)
                  / this.model.rect.width();
                let yResult: number = (vp2px(event.fingerList[0].globalY) - this.model.rect.top)
                  / this.model.rect.height();
                if (this.model.photoTapListener != null) {
                  this.model.photoTapListener.onPhotoTap(xResult, yResult);
                }
              } else {
                if (this.model.outsidePhotoTapListener != null) {
                  this.model.outsidePhotoTapListener.onOutsidePhotoTap();
                }
              }
            }
          }),
        LongPressGesture()
          .onAction((event: GestureEvent) => {
            console.debug("PhotoView long press:")
            if (event && this.model.longPressListener != null) {
              this.model.longPressListener.onLongPress(event)
            }
          })
          .onActionEnd((event: GestureEvent) => {
            // if (this.model.longPressListener != null) {
            //   this.model.longPressListener.onLongPress(event)
            // }
          }),
        PanGesture(this.model.panOption)
          .onActionStart(() => {
            this.model.preOffsetX = this.model.offsetX;
            this.model.preOffsetY = this.model.offsetY;
          })
          .onActionUpdate((event: GestureEvent) => {
            if (this.model.isZoom && this.model.scale != this.model.scaleMin) {
              this.model.setOffset(this.model.preOffsetX + event.offsetX * this.model.scale,
                this.model.preOffsetY + event.offsetY * this.model.scale);
            }
          })
          .onActionEnd((event: GestureEvent) => {
            if (this.model.viewDragListener != null) {
              this.model.viewDragListener.onDrag(this.model.offsetX, this.model.offsetY)
            }
            if (this.model.matrixChangedListener != null) {
              this.model.matrixChangedListener.onMatrixChanged(this.model.rect)
            }
          }),
        PinchGesture({ fingers: 2 })
          .onActionUpdate((event: GestureEvent) => {
            if (this.model.isZoom) {
              this.model.isPinch = true;
              this.model.scale = this.model.currentScale * event.scale;

              if (this.model.animate) {
                this.zoomTo(this.model.scale, this.model.mZoomDuration)
              } else {
                this.model.offsetX = 0;
                this.model.offsetY = 0;
                this.model.updateMatrix();
              }
            }
          })
          .onActionEnd((event: GestureEvent) => {
            this.model.isPinch = false;
            if (this.model.scale < this.model.scaleMin) {
              this.model.scale = this.model.scaleMin
            }
            if (this.model.scale > this.model.scaleMax) {
              this.model.scale = this.model.scaleMax
            }

            this.model.currentScale = this.model.scale;
            this.model.preOffsetX = 0;
            this.model.preOffsetY = 0;

            if (this.model.animate) {
              this.zoomTo(this.model.scale, this.model.mZoomDuration)
            } else {
              this.model.offsetX = 0;
              this.model.offsetY = 0;
              this.model.updateMatrix();
            }

            this.model.isZooming = (this.model.scale > 1)
            if (this.model.matrixChangedListener != null) {
              this.model.matrixChangedListener.onMatrixChanged(this.model.rect)
            }
            if (this.model.scaleChangeListener != null) {
              this.model.scaleChangeListener.onScaleChange(this.model.scale, 0, 0)
            }
          })
        , SwipeGesture({ direction: this.model.swipeDirection })
          .onAction((event: GestureEvent) => {
            console.info("xxx photo swipe:")
          }),
      )
    ).onTouch((event?: TouchEvent): void => {
      if (event) {
        if (event.type == TouchType.Up) {
          //ÊîæÂ§ßÂõæÁâáÊãñÊãΩÂà∞ËæπÁïåÂêéÔºåÂêØÂä®ÊªëÂä®ÊâãÂäøÔºåÂ∞ÜÊãñÊãΩÊâãÂäøÊñπÂêëË∞ÉÊï¥
          if (!this.model.vertical && this.model.enableSwipe) {
            if (this.model.isBoundary_X) {
              this.model.isBoundary_X = false;
              console.log("xxx this.gestureConversion1 PanDirection.Vertical, SwipeDirection.Horizontal");
              this.model.gestureConversion(PanDirection.Vertical, SwipeDirection.Horizontal);
            }
          } else if (this.model.vertical && this.model.enableSwipe) {
            if (this.model.isBoundary_Y) {
              this.model.isBoundary_Y = false;
              console.log("xxx this.gestureConversion2 PanDirection.Horizontal, SwipeDirection.Vertical");
              this.model.gestureConversion(PanDirection.Horizontal, SwipeDirection.Vertical);
            }
          }
        }
      }
    })
  }
}

namespace PhotoView {
  @ObservedV2
  export class Model {
    @Trace src: ResourceStr = '';
    @Trace sWidth: number = 0;
    @Trace sHeight: number = 0;
    @Trace componentWidth: number = 0;
    @Trace componentHeight: number = 0;
    @Trace baseAngle: number = 0
    @Trace rotateAngle: number = 0
    @Trace scale: number = 1
    @Trace currentScale: number = 1
    @Trace animate: boolean = false //  ÊòØÂê¶ÂèØÊâãÂäøÁº©Êîæ
    @Trace imageFit: ImageFit = ImageFit.Contain;
    @Trace scaleMin: number = 1.0
    @Trace scaleMed: number = 2
    @Trace scaleMax: number = 3.0
    @Trace isZoom: boolean = true
    @Trace centerX: number = 0
    @Trace centerY: number = 0
    @Trace centerZ: number = 0
    @Trace offsetX: number = 0
    @Trace offsetY: number = 0
    @Trace preOffsetX: number = 0
    @Trace preOffsetY: number = 0
    @Trace verticalEnd: boolean = false;
    //Áº©ÊîæÂêé Âπ≥ÁßªÂà∞ÂçäÂ±èËæπÁïåÁöÑÂ°´ÂÖÖÂÄº
    @Trace startOffsetX: number = 10;
    @Trace startOffsetY: number = 23;
    photoTapListener: OnPhotoTapListener | null = null;
    doubleTapListener: OnDoubleTapListener | null = null;
    longPressListener: OnLongPressListener | null = null;
    clickListener: OnClickListener | null = null;
    matrixChangedListener: OnMatrixChangedListener | null = null;
    viewTapListener: OnViewTapListener | null = null;
    viewDragListener: OnViewDragListener | null = null;
    scaleChangeListener: OnScaleChangedListener | null = null
    outsidePhotoTapListener: OnOutsidePhotoTapListener | null = null
    onSwipeListener: OnSwipeListener | null = null
    @Trace rect: RectF | null = null;
    @Trace iterations: number = 0
    @Trace mZoomDuration: number = 200;
    @Trace scaledDensity: number = 0;
    @Trace isZooming: boolean = false;
    @Trace dragging: boolean = false;
    @Trace contentHeight: number = 0;
    @Trace contentWidth: number = 0;
    @Trace contentOffSetX: number = 0;
    @Trace contentOffSetY: number = 0;
    @Trace previewImage: string | Resource = '';
    @Trace panDirection: PanDirection = PanDirection.None;
    @Trace swipeDirection: SwipeDirection = SwipeDirection.Horizontal
    @Trace cacheSwipeDirection: SwipeDirection = SwipeDirection.Horizontal
    @Trace childSpan: boolean = false;
    @Trace parentIsSwiper: boolean = false;
    @Trace matrix: Matrix4.Matrix4Transit = Matrix4.identity()
      .rotate({
        x: 0,
        y: 0,
        z: 1,
        angle: this.rotateAngle
      })
      .translate({ x: this.offsetX, y: this.offsetY })
      .scale({ x: this.scale, y: this.scale });
    //ÊòØÂê¶ÊãñÊãΩÂà∞ËæπÁïå
    isBoundary_X: boolean = false;
    isBoundary_Y: boolean = false;
    // ÊòØÂê¶ÂèåÊåáÁº©Êîæ
    isPinch: boolean = false
    //ÊòØÂê¶ÂûÇÁõ¥ÊªëÂä®
    vertical: boolean = false;
    //ÊòØÂê¶ÂêØÂä®ÊªëÂä®
    enableSwipe: boolean = true;
    // ÊãñÊãΩÊâãÂäøÂèÇÊï∞
    panOption: PanGestureOptions = new PanGestureOptions({ fingers: 1, direction: PanDirection.None })

    constructor() {
      console.debug("PhotoView create")
    }

    public setVertical(isVertical: boolean): Model {
      this.vertical = isVertical;
      return this
    }

    public setImageURI(src: string): Model {
      this.src = src
      return this
    }

    public setImageResource(src: Resource): Model {
      this.src = src
      return this
    }

    public setImageElement(src: PixelMap) {
      this.src = src
      return this
    }

    public setSwipeDirection(swipeDirection: SwipeDirection) {
      this.swipeDirection = swipeDirection;
      this.cacheSwipeDirection = swipeDirection;
      return this;
    }

    public isParentSwiper(parentIsSwiper: boolean) {
      this.parentIsSwiper = parentIsSwiper;
      return this;
    }

    public setImageFit(imageFit: ImageFit): Model {
      this.imageFit = imageFit
      console.log("imageFit")
      return this
    }

    public setPreviewImage(src: string | Resource) {
      this.previewImage = src;
      return this
    }

    public setScale(scale: number, animate: boolean): Model {
      this.scale = scale
      if (this.scale < this.scaleMin) {
        this.scale = this.scaleMin
      }
      if (this.scale > this.scaleMax) {
        this.scale = this.scaleMax
      }

      if (animate) {
        this.iterations = 1
      } else {
        this.iterations = 0
      }
      this.animate = animate
      return this
    }

    public setZoomTransitionDuration(milliseconds: number): Model {
      this.mZoomDuration = milliseconds;
      return this;
    }

    public getMinimumScale(): number {
      return this.scaleMin
    }

    public getMediumScale(): number {
      return this.scaleMed
    }

    public getMaximumScale(): number {
      return this.scaleMax
    }

    public getScale(): number {
      return this.scale
    }

    public setMinimumScale(minimumScale: number): Model {
      this.scaleMin = minimumScale
      return this
    }

    public setMediumScale(mediumScale: number): Model {
      this.scaleMed = mediumScale
      return this
    }

    public setMaximumScale(maximumScale: number): Model {
      this.scaleMax = maximumScale
      return this
    }

    public setScaleLevels(minimumScale: number, mediumScale: number, maximumScale: number): Model {
      this.scaleMin = minimumScale
      this.scaleMed = mediumScale
      this.scaleMax = maximumScale
      return this
    }

    public setBaseRotation(degrees: number): Model {
      this.rotateAngle = degrees % 360
      this.setRotationBy(this.rotateAngle)
      return this
    }

    public setRotationTo(rotationDegree: number): Model {
      this.rotateAngle = rotationDegree % 360
      this.matrix = Matrix4.identity()
        .rotate({
          x: 0,
          y: 0,
          z: 1,
          angle: this.rotateAngle
        })
      return this
    }

    public setRotationBy(rotationDegree: number): Model {
      this.rotateAngle = (this.rotateAngle + rotationDegree) % 360
      this.matrix = Matrix4.identity()
        .rotate({
          x: 0,
          y: 0,
          z: 1,
          angle: this.rotateAngle
        })
      return this
    }

    public setRotationCenter(x: number, y: number, z: number): Model {
      this.centerX = z
      this.centerY = y
      this.centerZ = z
      return this
    }

    public setZoomable(zoomable: boolean): Model {
      if (!zoomable) {
        this.scale = this.scaleMin
        this.setImageFit(ImageFit.None)
        this.isZoom = false
        return this
      }
      this.isZoom = zoomable
      return this
    }

    public isZoomEnabled(): boolean {
      return this.isZoom
    }

    public setImageOffset(pointX: number, pointY: number): Model {
      this.offsetX = pointX
      this.offsetY = pointY
      return this
    }

    public setOnClickListener(listener: OnClickListener): Model {
      this.clickListener = listener;
      return this;
    }

    public setOnLongClickListener(listener: OnLongPressListener): Model {
      this.longPressListener = listener;
      return this;
    }

    public setOnMatrixChangeListener(listener: OnMatrixChangedListener): Model {
      this.matrixChangedListener = listener;
      return this;
    }

    public setOnPhotoTapListener(listener: OnPhotoTapListener): Model {
      this.photoTapListener = listener;
      return this;
    }

    public setOnViewTapListener(listener: OnViewTapListener): Model {
      this.viewTapListener = listener;
      return this;
    }

    public setOnViewDragListener(listener: OnViewDragListener): Model {
      this.viewDragListener = listener;
      return this;
    }

    public setOnScaleChangeListener(scaleChangeListener: OnScaleChangedListener): Model {
      this.scaleChangeListener = scaleChangeListener;
      return this;
    }

    public setOnOutsidePhotoTapListener(outsidePhotoTapListener: OnOutsidePhotoTapListener): Model {
      this.outsidePhotoTapListener = outsidePhotoTapListener;
      return this;
    }

    public setOnDoubleTapListener(onDoubleTapListener: OnDoubleTapListener): Model {
      this.doubleTapListener = onDoubleTapListener;
      return this;
    }

    public setOnSwipeListener(onSwipeListener: OnSwipeListener): Model {
      this.onSwipeListener = onSwipeListener;
      return this;
    }

    public updateMatrix(): void {
      if (!!this.rect) {
        const originLeft: number = this.contentOffSetX;
        const originTop: number = this.contentOffSetY;
        const originWidth: number = this.contentWidth;
        const originHeight: number = this.contentHeight;

        const scaledWidth: number = originWidth * this.scale;
        const scaledHeight: number = originHeight * this.scale;

        const centerXOffset = (scaledWidth - originWidth) / 2;
        const centerYOffset = (scaledHeight - originHeight) / 2;

        this.rect.left = originLeft + this.offsetX - centerXOffset;
        this.rect.top = originTop + this.offsetY - centerYOffset;
        this.rect.right = this.rect.left + scaledWidth + centerXOffset;
        this.rect.bottom = this.rect.top + scaledHeight + centerYOffset;

      }

      if (this.enableSwipe && !this.isPinch) {
        //ÂõæÁâáÊîæÂ§ßÊó∂Á¶ÅÁî®ÊªëÂä®ÊâãÂäøÔºåÂêØÂä®ÊãñÂä®ÊâãÂäø
        //ÂõæÁâáÂ§çÂéüÊó∂ÂêØÂä®ÊªëÂä®ÊâãÂäøÔºåÁ¶ÅÁî®ÊãñÂä®ÊâãÂäø
        if (this.scale == this.scaleMin) {
          if (!this.vertical) {
            console.log("xxx this.gestureConversion3 PanDirection.None, SwipeDirection.Horizontal");
            this.gestureConversion(PanDirection.None, SwipeDirection.Horizontal)
          } else {
            console.log("xxx this.gestureConversion4 PanDirection.None, SwipeDirection.Vertical");
            this.gestureConversion(PanDirection.None, SwipeDirection.Vertical)
          }
        } else {
          console.log("xxx this.gestureConversion5 PanDirection.All, SwipeDirection.None");
          this.gestureConversion(PanDirection.All, SwipeDirection.None)
        }
      }

      this.matrix = Matrix4.identity()
        .rotate({
          x: 0,
          y: 0,
          z: 1,
          angle: this.rotateAngle
        })
        .translate({ x: this.offsetX, y: this.offsetY, z: 1 })
        .scale({
          x: this.scale,
          y: this.scale,
          centerX: this.centerX,
          centerY: this.centerY
        })
      if (this.onSwipeListener != null) {
        this.onSwipeListener.onSwipeListener(this.childSpan)
      }
    }

    //ËÆæÁΩÆÊªëÂä®ÊâãÂäø‰∏éÊãñÊãΩÊâãÂäøÁöÑÊñπÂêë
    public gestureConversion(panDirection: PanDirection, swipeDirection?: SwipeDirection, vertical?: boolean): Model {
      this.panOption.setDirection(panDirection)
      if (swipeDirection !== undefined) {
        this.swipeDirection = swipeDirection
        if (vertical !== undefined) {
          this.vertical = vertical
        }
        if (!this.enableSwipe) {
          this.enableSwipe = true
        }
      } else {
        this.enableSwipe = false;
        this.swipeDirection = SwipeDirection.None;
      }
      return this;
    }

    public resetMatrix(): void {
      this.scale = 1;
      this.currentScale = 1;
      this.centerX = 0;
      this.centerY = 0;
      this.offsetX = 0;
      this.offsetY = 0;
      this.rotateAngle = 0
      this.panDirection = PanDirection.None;
      this.swipeDirection = this.cacheSwipeDirection;
      this.updateMatrix();
    }

    public getSuppMatrix(matrix: object): void {
      this.matrix;
    }

    public setSuppMatrix(matrix: Matrix4.Matrix4Transit): Model {
      this.matrix = matrix;
      return this;
    }

    public isScaling(): boolean {
      return this.scale != 1;
    }

    public isDragging(): boolean {
      return this.offsetX != 0 || this.offsetY != 0;
    }

    public getRectF(): RectF | null {
      return this.rect;
    }

    public setOffset(offsetX: number, offsetY: number): void {
      let maxOffsetX = (this.contentWidth * this.scale - this.componentWidth) / 2 / this.scale + 10;
      let maxOffsetY = (this.contentHeight * this.scale - this.componentHeight) / 2 / this.scale + 10;
      console.log("xxx maxOffsetX = " + maxOffsetX);
      if (this.contentWidth * this.scale > this.componentWidth) {
        this.offsetX = offsetX;
        if (this.offsetX > maxOffsetX) {
          //Â∑¶Ëæπ
          this.offsetX = maxOffsetX;
          this.isBoundary_X = true;
        } else if (this.offsetX < -maxOffsetX) {
          //Âè≥Ëæπ
          this.offsetX = -maxOffsetX;
          this.isBoundary_X = true;
        }
      }

      if (this.contentHeight * this.scale > this.componentHeight) {
        this.offsetY = offsetY;
        if (this.offsetY > maxOffsetY) {
          this.offsetY = maxOffsetY;
          this.isBoundary_Y = true;
        } else if (this.offsetY < -maxOffsetY) {
          this.offsetY = -maxOffsetY;
          this.isBoundary_Y = true;
        }
      }
      this.updateMatrix();
    }
  }
}

export { PhotoView }¿‘rDí≠@ohos.matrix4ß./RectF‘rEó™assertions®external¢id§meta±moduleSideEffects™resolvedByµsyntheticNamedExportsA√Ÿj hvigor_ignore__Applications_DevEco-Studio.app_Contents_sdk_default_openharmony_ets_api_@ohos.matrix4.d.tsA√™oh-resolve¬EA¬Ÿ™/Users/wangzhe/DevEcoStudioProjects/LittleGallery/Application/oh_modules/.ohpm/@ohos+photoview@2.1.0/oh_modules/@ohos/photoview/src/main/ets/components/mainpage/RectF.etsA√™oh-resolve¬í‘rFñßversion§file™sourceRootßsources•names®mappings¨PhotoView.js†ë≠PhotoView.etsê‹êêêêêêêêêëî    êêêêêêêêêêêêëî ñî   î î î î# #î$ $ñî   î î î î î íî Ãlî Ãlëî Ãk êñîÃO Ãm"îÃS Ãm&îÃ\ Ãm/îÃ] Ãm0îÃb Ãm5îÃd Ãm7êëî Ãiñî Ão	î
 Ãoî Ãoî Ãoî Ãoî Ão1ñî Ãpî Ãpî Ãpî Ãpî Ãpî Ãpõî Ãqî Ãqî Ãqî Ãqî Ãqî Ãqî Ãqî Ãqî. Ãq*î0 Ãq,î2 Ãq.öî Ãrî Ãrî Ãrî Ãrî  Ãrî% Ãrî& Ãr î5 Ãr/î7 Ãr1î8 Ãr1ëî	 Ãsõî Ãsî Ãsî Ãsî Ãsî Ãsî Ãsî# Ãs!î$ Ãs"î3 Ãs1î5 Ãs3î7 Ãs5öî Ãtî Ãtî Ãtî Ãtî  Ãtî% Ãtî& Ãt î5 Ãt/î7 Ãt1î8 Ãt1ëî	 Ãuëî Ãuïî Ãvî Ãvî Ãvî  Ãvî! Ãvëî	 Ãwíî Ãxî Ãxîî Ãyî Ãyî Ãyî  Ãyîî Ãzî Ãzî Ãzî Ãzñî Ã{î Ã{î Ã{î Ã{î Ã{î" Ã{îî Ã|î Ã|î Ã|î Ã|îî Ã}î Ã}î Ã}î Ã}ñî Ã~î Ã~î Ã~î Ã~î Ã~î% Ã~ïî Ãî Ãî Ãî Ãî Ãíî ÃÄî ÃÄîî	 ÃÅî ÃÅî ÃÅ
î ÃÅôî ÃÇî ÃÇ
î ÃÇî ÃÇî ÃÇî ÃÇî ÃÇî+ ÃÇ%î, ÃÇ&òî ÃÉî ÃÉ
î ÃÉî ÃÉî ÃÉî# ÃÉî% ÃÉî& ÃÉ îî ÃÑî	 ÃÑî
 ÃÑî ÃÑíî ÃÖî ÃÖëî Ãáê‹ î Ãàî Ãàî Ãà	î Ãàî# Ãàî% Ãàî2 Ãà#î3 Ãà$î9 Ãà*î; Ãà,îÃE Ãà6îÃG Ãà8îÃP ÃàÃAîÃQ ÃàÃBîÃW ÃàÃHîÃY ÃàÃJîÃg ÃàÃXîÃi ÃàÃZîÃr ÃàÃcîÃs ÃàÃdîÃy ÃàÃjîÃ{ ÃàÃlêñî Ã°î Ã°î  Ã°î+ Ã°î, Ã°î5 Ã°(úî Ã¢î Ã¢î Ã¢î  Ã¢î% Ã¢î' Ã¢î( Ã¢î* Ã¢î1 Ã¢&î3 Ã¢(î4 Ã¢)î6 Ã¢+ôî Ã¢î Ã¢î Ã£î Ã£î  Ã£î! Ã£î& Ã£(î( Ã£*î* Ã£,òî Ã§î Ã§î Ã§î Ã§î Ã§î1 Ã§-î2 Ã§.î3 Ã§.òî Ã•î Ã•î Ã•î Ã•î Ã•î Ã•î% Ã•!î' Ã•#ûî Ã¶î Ã¶î Ã¶î Ã¶î" Ã¶î# Ã¶î( Ã¶"î, Ã¶&î0 Ã¶*î1 Ã¶+î6 Ã¶0î7 Ã¶1î? Ã¶9îÃA Ã¶;ùî Ãßî Ãßî Ãßî" Ãßî# Ãßî( Ãß î+ Ãß#î/ Ãß'î0 Ãß(î5 Ãß-î6 Ãß.î> Ãß6î? Ãß6ôî Ã®î Ã®î Ã®î" Ã®î# Ã®î, Ã®$î/ Ã®'î4 Ã®,î5 Ã®-òî Ã©î Ã©î Ã©î" Ã©î# Ã©î. Ã©&î0 Ã©(î1 Ã©)ëî Ã™ëî Ã™ûî Ã´î Ã´î  Ã´î! Ã´î& Ã´î' Ã´î, Ã´$î/ Ã´'î3 Ã´+î4 Ã´,î9 Ã´1î: Ã´2îÃB Ã´:îÃD Ã´<ùî Ã¨î  Ã¨î! Ã¨î& Ã¨î' Ã¨î, Ã¨"î/ Ã¨%î3 Ã¨)î4 Ã¨*î9 Ã¨/î: Ã¨0îÃB Ã¨8îÃC Ã¨8õî Ã≠î  Ã≠î! Ã≠î& Ã≠î' Ã≠î3 Ã≠)î6 Ã≠,îÃB Ã≠8îÃC Ã≠9îÃF Ã≠<îÃG Ã≠<õî ÃÆî  ÃÆî! ÃÆî& ÃÆî' ÃÆî5 ÃÆ+î8 ÃÆ.îÃF ÃÆ<îÃG ÃÆ=îÃK ÃÆÃAîÃL ÃÆÃAôî ÃØî  ÃØî! ÃØî& ÃØî' ÃØî0 ÃØ&î3 ÃØ)î7 ÃØ-î8 ÃØ.ëî Ã∞ëî Ã∞ùî Ã±î  Ã±î! Ã±î& Ã±î' Ã±î, Ã±"î/ Ã±%î3 Ã±)î4 Ã±*î9 Ã±/î: Ã±0îÃB Ã±8îÃC Ã±8õî Ã≤î  Ã≤î! Ã≤î& Ã≤î' Ã≤î3 Ã≤)î6 Ã≤,îÃB Ã≤8îÃC Ã≤9îÃG Ã≤=îÃH Ã≤=ùî Ã≥î  Ã≥î! Ã≥î& Ã≥î' Ã≥î5 Ã≥+î8 Ã≥.î< Ã≥2î= Ã≥3îÃB Ã≥8îÃC Ã≥9îÃV Ã≥ÃLîÃW Ã≥ÃLôî Ã¥î  Ã¥î! Ã¥î& Ã¥î' Ã¥î0 Ã¥&î3 Ã¥)î8 Ã¥.î9 Ã¥/ëî Ãµòî Ã∂î Ã∂î  Ã∂î! Ã∂î& Ã∂î' Ã∂î. Ã∂&î0 Ã∂(‹ î Ã∑î  Ã∑î! Ã∑î' Ã∑î( Ã∑î, Ã∑"î- Ã∑#î2 Ã∑(î3 Ã∑)î8 Ã∑.î: Ã∑0î> Ã∑4î? Ã∑5îÃD Ã∑:îÃE Ã∑;îÃR Ã∑ÃHîÃS Ã∑ÃIîÃT Ã∑ÃIëî Ã∏ëî Ã∏òî Ãπî  Ãπî! Ãπî& Ãπî' Ãπî3 Ãπ)î5 Ãπ+î6 Ãπ,ëî Ã∫ëî Ãªëî Ãºöî ÃΩî ÃΩî ÃΩî ÃΩî ÃΩî ÃΩî4 ÃΩ0î8 ÃΩ4î< ÃΩ8î> ÃΩ:‹ î Ãæî Ãæî Ãæî Ãæî Ãæî4 Ãæ.î5 Ãæ/îÃD Ãæ>îÃE Ãæ?îÃI ÃæÃCîÃJ ÃæÃDîÃO ÃæÃIîÃP ÃæÃJîÃT ÃæÃNîÃU ÃæÃOîÃV ÃæÃOëî Ãøöî Ã¿î Ã¿î Ã¿î Ã¿î Ã¿î Ã¿î2 Ã¿.î6 Ã¿2î: Ã¿6î< Ã¿8‹ î Ã¡î Ã¡î Ã¡î Ã¡î Ã¡î2 Ã¡,î3 Ã¡-îÃ@ Ã¡:îÃA Ã¡;îÃE Ã¡?îÃF Ã¡Ã@îÃK Ã¡ÃEîÃL Ã¡ÃFîÃQ Ã¡ÃKîÃS Ã¡ÃMîÃT Ã¡ÃNîÃV Ã¡ÃPîÃW Ã¡ÃQîÃX Ã¡ÃRîÃY Ã¡ÃRëî Ã¬öî Ã√î Ã√î Ã√î Ã√î Ã√î Ã√î0 Ã√,î4 Ã√0î8 Ã√4î: Ã√6úî Ãƒî Ãƒî Ãƒî Ãƒî Ãƒî0 Ãƒ*î1 Ãƒ+î< Ãƒ6î= Ãƒ7îÃB Ãƒ<îÃC Ãƒ=îÃD Ãƒ=ëî Ã≈íî Ã∆
î Ã∆íî Ã¢î Ã¢úî Ã«î Ã«î Ã«î  Ã«î% Ã«î' Ã«î( Ã«î* Ã«î1 Ã«&î3 Ã«(î4 Ã«)î6 Ã«+ôî Ã«î Ã«î Ã»î Ã»î  Ã»î! Ã»î& Ã»(î( Ã»*î* Ã»,òî Ã…î Ã…î Ã…î Ã…î Ã…î1 Ã…-î2 Ã….î3 Ã….öî Ã î Ã î Ã î Ã î Ã î Ã î, Ã (î0 Ã ,î4 Ã 0î6 Ã 2úî ÃÀî ÃÀî ÃÀî ÃÀî ÃÀî, ÃÀ&î- ÃÀ'î4 ÃÀ.î5 ÃÀ/î: ÃÀ4î; ÃÀ5î< ÃÀ6ëî ÃÃ‹ î ÃÕî ÃÕî ÃÕî ÃÕî ÃÕî ÃÕî$ ÃÕ î% ÃÕ!î/ ÃÕ+î3 ÃÕ/î4 ÃÕ0î9 ÃÕ5î: ÃÕ6îÃD ÃÕÃ@îÃE ÃÕÃAîÃF ÃÕÃBîÃG ÃÕÃCîÃI ÃÕÃEíî ÃŒî ÃŒëî Ãœöî Ã–î Ã–î Ã–î Ã–î Ã–î Ã–î. Ã–*î2 Ã–.î6 Ã–2î8 Ã–4‹ "î Ã—î Ã—î Ã—î Ã—î Ã—î. Ã—(î/ Ã—)î8 Ã—2î9 Ã—3î> Ã—8î? Ã—9îÃD Ã—>îÃE Ã—?îÃO Ã—ÃIîÃP Ã—ÃJîÃQ Ã—ÃKîÃR Ã—ÃLîÃS Ã—ÃMîÃZ Ã—ÃTîÃ[ Ã—ÃUîÃ] Ã“îÃb Ã“îÃc Ã“îÃh Ã“îÃi Ã“îÃs Ã“&îÃt Ã“'îÃu Ã“(îÃv Ã“)îÃw Ã“*îÃ~ Ã“1îÃ Ã“2îÃÄ Ã“3îÃÅ Ã“3ëî Ã”öî Ã‘î Ã‘î Ã‘î Ã‘î Ã‘î Ã‘î# Ã‘î' Ã‘#î+ Ã‘'î- Ã‘)íî Ã’îÃC Ã’=‹ #î Ã÷î Ã÷î Ã÷î Ã÷î" Ã÷î# Ã÷î' Ã÷!î( Ã÷"î0 Ã÷*î1 Ã÷+î6 Ã÷0î7 Ã÷1î< Ã÷6î= Ã÷7îÃG Ã÷ÃAîÃH Ã÷ÃBîÃI Ã÷ÃCîÃJ Ã÷ÃDîÃK Ã÷ÃEîÃR Ã÷ÃLîÃS Ã÷ÃMîÃU Ã÷ÃOîÃZ Ã÷ÃTîÃ[ Ã÷ÃUîÃ` Ã÷ÃZîÃa Ã÷Ã[îÃk Ã÷ÃeîÃl Ã÷ÃfîÃm Ã÷ÃgîÃn Ã÷ÃhîÃo Ã÷ÃiîÃv Ã÷ÃpîÃw Ã÷ÃqîÃx Ã÷ÃrîÃz Ã÷Ãt‹ î Ã◊î Ã◊î# Ã◊î& Ã◊&î' Ã◊'î, Ã◊,î- Ã◊-î2 Ã◊2î3 Ã◊3î= Ã◊=î> Ã◊>î? Ã◊?îÃ@ Ã◊Ã@îÃA Ã◊ÃAîÃH Ã◊ÃHîÃI Ã◊ÃIîÃL Ã◊ÃLîÃP Ã◊ÃPîÃQ Ã◊ÃQîÃV Ã◊ÃVîÃW Ã◊ÃWîÃ[ Ã◊Ã[îÃ\ Ã◊Ã\îÃ` Ã◊Ã`îÃa Ã◊Ãaöî Ãÿî" Ãÿî# Ãÿî( Ãÿî) Ãÿî- Ãÿ#î. Ãÿ$î3 Ãÿ)î5 Ãÿ+î6 Ãÿ,‹ î ÃŸî ÃŸî# ÃŸî& ÃŸ&î' ÃŸ'î, ÃŸ,î- ÃŸ-î2 ÃŸ2î3 ÃŸ3î= ÃŸ=î> ÃŸ>î? ÃŸ?îÃ@ ÃŸÃ@îÃA ÃŸÃAîÃH ÃŸÃHîÃI ÃŸÃIîÃL ÃŸÃLîÃP ÃŸÃPîÃQ ÃŸÃQîÃV ÃŸÃVîÃW ÃŸÃWîÃ[ ÃŸÃ[îÃ\ ÃŸÃ\îÃ_ ÃŸÃ_îÃ` ÃŸÃ`öî Ã⁄î" Ã⁄î# Ã⁄î( Ã⁄î) Ã⁄î- Ã⁄#î. Ã⁄$î4 Ã⁄*î6 Ã⁄,î7 Ã⁄-öî Ã€î Ã€î  Ã€î! Ã€î& Ã€î' Ã€î7 Ã€/î; Ã€3î? Ã€7îÃA Ã€9ûî Ã‹î  Ã‹î! Ã‹î& Ã‹î' Ã‹î7 Ã‹-î8 Ã‹.îÃB Ã‹8îÃC Ã‹9îÃJ Ã‹Ã@îÃL Ã‹ÃBîÃS Ã‹ÃIîÃT Ã‹ÃJîÃU Ã‹ÃKëî Ã›ëî Ãﬁëî Ãﬁöî Ãﬂî Ãﬂî  Ãﬂî! Ãﬂî& Ãﬂî' Ãﬂî> Ãﬂ6îÃB Ãﬂ:îÃF Ãﬂ>îÃH ÃﬂÃ@öî Ã‡î  Ã‡î! Ã‡î& Ã‡î' Ã‡î> Ã‡4î? Ã‡5îÃP Ã‡ÃFîÃR Ã‡ÃHîÃS Ã‡ÃIëî Ã·ëî Ã‚ëî Ã„íî Ã‰
î Ã‰íî Ã«î Ã«íî ÃÂî ÃÂôî ÃÂî ÃÂî ÃÊî% ÃÊî& ÃÊî' ÃÊî, ÃÊ(î. ÃÊ*î0 ÃÊ,òî ÃÁî ÃÁî ÃÁî ÃÁî ÃÁî5 ÃÁ1î6 ÃÁ2î7 ÃÁ2úî ÃËî ÃËî ÃËî ÃËî! ÃËî" ÃËî' ÃË#î( ÃË$î9 ÃË5î= ÃË9îÃA ÃË=îÃC ÃË?úî ÃÈî ÃÈî ÃÈî ÃÈî ÃÈî0 ÃÈ*î1 ÃÈ+î< ÃÈ6î= ÃÈ7îÃB ÃÈ<îÃC ÃÈ=îÃD ÃÈ=ëî ÃÍíî ÃÎ
î ÃÎôî ÃÂî ÃÂî ÃÏî( ÃÏî) ÃÏî* ÃÏî/ ÃÏ+î1 ÃÏ-î3 ÃÏ/íî ÃÌî> ÃÌ:íî ÃÓîÃD ÃÓÃ@íî ÃÔî ÃÔíî Ã
î Ãíî ÃÂî ÃÂòî ÃÒî ÃÒî ÃÒî" ÃÒî# ÃÒî( ÃÒî) ÃÒî2 ÃÒ'óî ÃÒî ÃÒî ÃÚî$ ÃÚî% ÃÚî( ÃÚî* ÃÚùî ÃÛî ÃÛî ÃÛî ÃÛî ÃÛî% ÃÛ!î( ÃÛ$î, ÃÛ(î- ÃÛ)î2 ÃÛ.î3 ÃÛ/î: ÃÛ6î; ÃÛ7ùî ÃÙî ÃÙî ÃÙî ÃÙî ÃÙî% ÃÙ!î( ÃÙ$î, ÃÙ(î- ÃÙ)î2 ÃÙ.î3 ÃÙ/î: ÃÙ6î; ÃÙ7íî Ãı
î Ãıôî ÃÒî ÃÒî Ãˆî% Ãˆî& Ãˆî' Ãˆî, Ãˆ.î. Ãˆ0î0 Ãˆ2‹ î Ã˜î Ã˜î Ã˜î Ã˜î Ã˜î Ã˜î% Ã˜!î) Ã˜%î- Ã˜)î. Ã˜*î3 Ã˜/î4 Ã˜0î9 Ã˜5î= Ã˜9îÃA Ã˜=îÃB Ã˜>îÃG Ã˜ÃCîÃH Ã˜ÃDîÃP Ã˜ÃLîÃR Ã˜ÃN‹ (î Ã¯î Ã¯î Ã¯î Ã¯î Ã¯î( Ã¯"î) Ã¯#î- Ã¯'î. Ã¯(î3 Ã¯-î4 Ã¯.î> Ã¯8îÃA Ã¯;îÃF Ã¯Ã@îÃG Ã¯ÃAîÃN Ã¯ÃHîÃQ Ã¯ÃKîÃU Ã¯ÃOîÃV Ã¯ÃPîÃ[ Ã¯ÃUîÃ\ Ã¯ÃVîÃa Ã¯Ã[îÃc Ã˘îÃg Ã˘îÃh Ã˘îÃm Ã˘îÃn Ã˘îÃx Ã˘%îÃ{ Ã˘(îÃÄ Ã˘-îÃÅ Ã˘.îÃà Ã˘5îÃã Ã˘8îÃè Ã˘<îÃê Ã˘=îÃï Ã˘ÃBîÃñ Ã˘ÃCîÃõ Ã˘ÃHîÃú Ã˘ÃIîÃù Ã˘ÃJëî Ã˙íî Ã˚
î Ã˚ôî ÃÒî ÃÒî Ã¸î" Ã¸î# Ã¸î$ Ã¸î) Ã¸+î+ Ã¸-î- Ã¸/öî Ã˝î Ã˝î Ã˝î Ã˝î Ã˝î Ã˝î/ Ã˝+î3 Ã˝/î7 Ã˝3î9 Ã˝5‹ î Ã˛î Ã˛î Ã˛î Ã˛î Ã˛î/ Ã˛)î0 Ã˛*î6 Ã˛0î7 Ã˛1î; Ã˛5î< Ã˛6îÃA Ã˛;îÃB Ã˛<îÃI Ã˛ÃCîÃK Ã˛ÃEîÃO Ã˛ÃIîÃP Ã˛ÃJîÃU Ã˛ÃOîÃV Ã˛ÃPîÃ] Ã˛ÃWîÃ^ Ã˛ÃXîÃ_ Ã˛ÃXëî Ãˇöî Õ î Õ î Õ î Õ î Õ î Õ î4 Õ 0î8 Õ 4î< Õ 8î> Õ :‹ î Õî Õî Õî Õî Õî4 Õ.î5 Õ/îÃD Õ>îÃE Õ?îÃI ÕÃCîÃJ ÕÃDîÃO ÕÃIîÃP ÕÃJîÃT ÕÃNîÃU ÕÃOîÃV ÕÃOëî Õíî Õ
î Õíî ÃÒî ÃÒòî Õî Õî  Õî" Õî) Õî+ Õ î, Õ!î. Õ#ôî Õî Õî Õî' Õî( Õî) Õî. Õ.î0 Õ0î2 Õ2òî Õî Õî Õî Õî Õî Õî% Õ!î' Õ#ôî Õî Õî Õî Õî Õî& Õ î) Õ#î- Õ'î. Õ(‹ î Õî Õî Õî Õî Õî$ Õî' Õ!î+ Õ%î, Õ&î1 Õ+î2 Õ,î> Õ8îÃA Õ;îÃF ÕÃ@îÃG ÕÃAîÃL ÕÃFîÃM ÕÃGòî Õ
î Õ
î Õ
î Õ
î" Õ
î# Õ
î* Õ
$î, Õ
&‹ î Õî Õî Õî# Õî$ Õî( Õ î) Õ!î. Õ&î/ Õ'î4 Õ,î6 Õ.î: Õ2î; Õ3îÃ@ Õ8îÃA Õ9îÃN ÕÃFîÃO ÕÃGîÃP ÕÃGëî Õëî Õôî Õî Õî Õî" Õî# Õî* Õ"î- Õ%î. Õ&î/ Õ'ôî Õî Õî Õî" Õî# Õî* Õ"î- Õ%î. Õ&î/ Õ'òî Õî Õî Õî" Õî# Õî/ Õ'î1 Õ)î2 Õ*ëî Õëî Õíî Õ
î Õôî Õî Õî Õî$ Õî% Õî& Õî+ Õ+î- Õ-î/ Õ/ôî Õî Õî Õî Õî Õî" Õî% Õ!î* Õ&î+ Õ'ûî Õî Õî Õî Õî Õî Õî$ Õ î' Õ#î+ Õ'î, Õ(î1 Õ-î2 Õ.î: Õ6î< Õ8ùî Õî Õî Õî Õî Õî$ Õî' Õ!î+ Õ%î, Õ&î1 Õ+î2 Õ,î: Õ4î; Õ4ëî Õûî Õî Õî Õî Õî Õî Õî$ Õ î' Õ#î+ Õ'î, Õ(î1 Õ-î2 Õ.î: Õ6î< Õ8ùî Õî Õî Õî Õî Õî$ Õî' Õ!î+ Õ%î, Õ&î1 Õ+î2 Õ,î: Õ4î; Õ4ëî Õùî Õî Õî Õî Õî Õî' Õ#î* Õ&î. Õ*î/ Õ+î4 Õ0î5 Õ1î: Õ6î; Õ7ôî Õî Õî Õî Õî Õî% Õ!î( Õ$î) Õ%î* Õ&ôî Õî Õî Õî Õî Õî% Õ!î( Õ$î) Õ%î* Õ&òî Õ î Õ î Õ î Õ î Õ î Õ î& Õ "î( Õ $‹ î Õ!î Õ!î Õ!î Õ!î  Õ!î$ Õ!î% Õ!î* Õ!$î+ Õ!%î0 Õ!*î2 Õ!,î6 Õ!0î7 Õ!1î< Õ!6î= Õ!7îÃJ Õ!ÃDîÃK Õ!ÃEîÃL Õ!ÃEëî Õ"ëî Õ"ôî Õ#î Õ#î Õ#î Õ#î Õ#î& Õ# î) Õ##î* Õ#$î+ Õ#%ôî Õ$î Õ$î Õ$î Õ$î Õ$î& Õ$ î) Õ$#î* Õ$$î+ Õ$%òî Õ%î Õ%î Õ%î Õ%î Õ%î+ Õ%%î- Õ%'î. Õ%(ëî Õ&‹ î Õ(î Õ(î Õ(î Õ(î Õ(î$ Õ( î' Õ(#î( Õ($î, Õ((î- Õ()î2 Õ(.î3 Õ(/î8 Õ(4î; Õ(7î< Õ(8î= Õ(9î> Õ(9öî Õ)î Õ)î Õ)î Õ)î Õ)î Õ)î4 Õ)0î8 Õ)4î< Õ)8î> Õ):‹ î Õ*î Õ*î Õ*î Õ*î Õ*î4 Õ*.î5 Õ*/îÃD Õ*>îÃE Õ*?îÃI Õ*ÃCîÃJ Õ*ÃDîÃO Õ*ÃIîÃP Õ*ÃJîÃT Õ*ÃNîÃU Õ*ÃOîÃV Õ*ÃOëî Õ+öî Õ,î Õ,î Õ,î Õ,î Õ,î Õ,î2 Õ,.î6 Õ,2î: Õ,6î< Õ,8‹ î Õ-î Õ-î Õ-î Õ-î Õ-î2 Õ-,î3 Õ--îÃ@ Õ-:îÃA Õ-;îÃE Õ-?îÃF Õ-Ã@îÃK Õ-ÃEîÃL Õ-ÃFîÃQ Õ-ÃKîÃS Õ-ÃMîÃT Õ-ÃNîÃV Õ-ÃPîÃW Õ-ÃQîÃX Õ-ÃRîÃY Õ-ÃRëî Õ.íî Õ/
î Õ/íî Õî Õúî Õ0
î Õ0î  Õ0î" Õ0î+ Õ0"î- Õ0$î1 Õ0(î2 Õ0)î7 Õ0.î8 Õ0/îÃF Õ0=îÃH Õ0?ôî Õ0
î Õ0î Õ1î! Õ1î" Õ1î# Õ1î( Õ1(î* Õ1*î, Õ1,òî Õ2î Õ2î Õ2î Õ2î Õ2î/ Õ2+î0 Õ2,î1 Õ2,íî Õ3
î Õ3íî Õ0
î Õ0íî Ã°î Ã°êôî Ãàî Ãàî Õ5î Õ5î Õ5î Õ5î Õ5!î! Õ5)î# Õ5+îî Õ6î Õ6
î Õ6î Õ6öî Õ7î Õ7î Õ7î Õ7î" Õ7î& Õ7î/ Õ7#î0 Õ7$î2 Õ7&î4 Õ7(íî Õ8
î5 Õ8'üî Õ9
î Õ9î Õ9î! Õ9î" Õ9î' Õ9î( Õ9î0 Õ9"î4 Õ9&î8 Õ9*î9 Õ9+î> Õ90î? Õ91îÃJ Õ9<îÃL Õ9>òî Õ:î  Õ:î$ Õ:î% Õ:î* Õ:î+ Õ:î7 Õ:'î9 Õ:)ôî  Õ;î$ Õ;î% Õ;î* Õ;î+ Õ;î7 Õ;%î: Õ;(î? Õ;-îÃ@ Õ;.òî  Õ<î' Õ<î( Õ<î+ Õ<î, Õ<îÃz Õ<ÃhîÃ{ Õ<ÃiîÃ| Õ<Ãj‹ î  Õ=î$ Õ=î% Õ=î* Õ=î+ Õ=î< Õ=*î= Õ=+îÃI Õ=7îÃJ Õ=8îÃR Õ=Ã@îÃT Õ=ÃBîÃb Õ=ÃPîÃc Õ=ÃQîÃm Õ=Ã[îÃn Õ=Ã\îÃo Õ=Ã]ëî Õ>ëî Õ?ûî Õ?î! Õ?î% Õ?î& Õ?î+ Õ?î, Õ? î4 Õ?(î8 Õ?,î< Õ?0î= Õ?1îÃB Õ?6îÃC Õ?7îÃN Õ?ÃBîÃP Õ?ÃDòî Õ@î  Õ@î$ Õ@î% Õ@î* Õ@î+ Õ@î7 Õ@'î9 Õ@)ôî  ÕAî$ ÕAî% ÕAî* ÕAî+ ÕAî7 ÕA%î: ÕA(î? ÕA-îÃ@ ÕA.òî  ÕBî' ÕBî( ÕBî+ ÕBî, ÕBîÃz ÕBÃhîÃ{ ÕBÃiîÃ| ÕBÃj‹ î  ÕCî$ ÕCî% ÕCî* ÕCî+ ÕCî< ÕC*î= ÕC+îÃI ÕC7îÃJ ÕC8îÃT ÕCÃBîÃV ÕCÃDîÃd ÕCÃRîÃe ÕCÃSîÃm ÕCÃ[îÃn ÕCÃ\îÃo ÕCÃ]ëî ÕDëî ÕEëî ÕF	ëî ÕGíî ÕHî ÕHêêòî Ãâî Ãâî Ãâî Ãâî Ãâî# Ãâî$ Ãâî' Ãâöî Ãâî Ãâî Ãä	î Ãäî Ãäî Ãäî Ãäî  Ãäî! Ãäî- Ãä$öî Ãâî Ãâî Ãã	î Ããî Ããî  Ããî! Ããî& Ããî' Ããî/ Ãã&öî Ãâî Ãâî Ãå	î Ãåî Ãåî  Ãåî! Ãåî& Ãåî' Ãåî- Ãå$òî Ãâî Ãâî Ãç	î Ãçî  Ãçî2 Ãç)î3 Ãç*î6 Ãç-ñî Ãâî Ãâî Ãé	î Ãéî Ãéî! Ãéôî Ãâî Ãâî Ãè	î Ãèî Ãèî Ãèî# Ãè$î% Ãè&î' Ãè(õî Ãê
î Ãêî Ãêî Ãêî Ãêî! Ãêî$ Ãêî) Ãê#î* Ãê$î/ Ãê)î0 Ãê*õî Ãë
î Ãëî Ãëî Ãëî Ãëî" Ãëî% Ãëî* Ãë$î+ Ãë%î1 Ãë+î2 Ãë,õî Ãí
î Ãíî Ãíî Ãíî Ãíî) Ãí#î, Ãí&î1 Ãí+î2 Ãí,îÃ@ Ãí:îÃA Ãí;õî Ãì
î Ãìî Ãìî Ãìî Ãìî* Ãì$î- Ãì'î2 Ãì,î3 Ãì-îÃB Ãì<îÃC Ãì=õî Ãî
î Ãîî Ãîî Ãîî Ãîî( Ãî"î+ Ãî%î0 Ãî*î1 Ãî+î> Ãî8î? Ãî9õî Ãï
î Ãïî Ãïî Ãïî Ãïî' Ãï!î* Ãï$î/ Ãï)î0 Ãï*î< Ãï6î= Ãï7õî Ãñ
î Ãñî Ãñî Ãñî Ãñî) Ãñ#î, Ãñ&î1 Ãñ+î2 Ãñ,îÃ@ Ãñ:îÃA Ãñ;õî Ãó
î Ãóî Ãóî Ãóî Ãóî) Ãó#î, Ãó&î1 Ãó+î2 Ãó,îÃ@ Ãó:îÃA Ãó;òî Ãô
î Ãôî Ãôî Ãôî" Ãô$î# Ãô%î1 Ãô3î2 Ãô4òî Ãö
î Ãöî Ãöî Ãöî! Ãö#î" Ãö$î0 Ãö2î1 Ãö3úî Ãõ
î Ãõî Ãõî Ãõ î# Ãõ%î$ Ãõ&î2 Ãõ4î5 Ãõ7î: Ãõ<î; Ãõ=îÃG ÃõÃIîÃH ÃõÃJúî Ãú
î Ãúî Ãúî Ãú!î$ Ãú&î% Ãú'î3 Ãú5î6 Ãú8î; Ãú=î< Ãú>îÃI ÃúÃKîÃJ ÃúÃL‹ î Ãù
î Ãùî Ãùî Ãùî Ãùî Ãùî" Ãùî& Ãù î+ Ãù%î, Ãù&î0 Ãù*î2 Ãù,î5 Ãù/î7 Ãù1î< Ãù6î> Ãù8îÃD Ãù>îÃE Ãù?îÃF Ãù?íî Ãûî Ãû	êíî Ãàî Ãàëî ÕIêêêêêêêêêêêêëî  Ãm	íî Ãmî	 Ãmëî( Ãm7ìî  ÕL î ÕL
î ÕLñî ÕNî ÕNî ÕNî ÕNî ÕNî ÕNëî Õòïî ÕOî ÕOî ÕOî ÕO î ÕO!ïî ÕPî ÕPî ÕPî ÕPî ÕPïî ÕQî ÕQî ÕQî ÕQî ÕQïî ÕRî ÕRî" ÕR$î# ÕR%î$ ÕR&ïî ÕSî  ÕSî# ÕS%î$ ÕS&î% ÕS'ïî ÕTî ÕTî ÕTî ÕT î ÕT ïî ÕUî ÕUî ÕU!î  ÕU"î! ÕU"ïî ÕVî ÕVî ÕVî ÕVî ÕVïî ÕWî ÕWî  ÕW"î! ÕW#î" ÕW#óî ÕXî ÕXî ÕXî  ÕX#î! ÕX#î" ÕX$î- ÕX/óî ÕYî ÕYî ÕY î$ ÕY(î% ÕY)î, ÕY0î- ÕY1ïî ÕZî ÕZî ÕZî ÕZ!î  ÕZ!ïî Õ[î Õ[î Õ[î Õ[î Õ[ïî Õ\î Õ\î Õ\î Õ\!î  Õ\!ïî Õ]î Õ]î Õ]î Õ]!î Õ]!ïî Õ^î Õ^î Õ^î Õ^î Õ^ïî Õ_î Õ_î Õ_î Õ_î Õ_ïî Õ`î Õ`î Õ`î Õ`î Õ`ïî Õaî Õaî Õaî Õaî Õaïî Õbî Õbî Õbî Õbî Õbïî Õcî Õcî Õc î Õc!î  Õc!ïî Õdî Õdî Õd î Õd!î  Õd!ïî Õeî Õeî Õe"î$ Õe'î% Õe(íî Õfî Õfïî Õgî Õgî  Õg"î" Õg$î# Õg%ïî Õhî Õhî  Õh"î" Õh$î# Õh%ïî Õiî! Õiî$ Õi2î( Õi6î) Õi7ïî Õjî" Õjî% Õj4î) Õj8î* Õj9ïî Õkî" Õkî% Õk4î) Õk8î* Õk9ïî Õlî Õlî! Õl,î% Õl0î& Õl1ïî Õmî& Õmî) Õm<î- ÕmÃ@î. ÕmÃAïî Õnî  Õnî# Õn0î' Õn4î( Õn5ïî Õoî! Õoî$ Õo2î( Õo6î) Õo7ïî Õpî$ Õpî' Õp9î+ Õp=î, Õp=ïî Õqî( Õqî+ ÕqÃ@î/ ÕqÃDî0 ÕqÃDïî Õrî  Õrî# Õr.î' Õr2î( Õr2ïî Õsî Õsî Õs î Õs$î Õs%ïî Õtî Õtî Õt î Õt!î  Õt!ïî Õuî Õuî! Õu#î$ Õu&î% Õu'ïî Õvî Õvî! Õv#î" Õv$î# Õv%ïî Õwî Õwî Õw î" Õw%î# Õw&ïî Õxî Õxî Õxî! Õx$î" Õx%ïî Õyî Õyî! Õy#î" Õy$î# Õy%ïî Õzî Õzî  Õz"î! Õz#î" Õz$ïî Õ{î Õ{î" Õ{$î# Õ{%î$ Õ{&ïî Õ|î Õ|î" Õ|$î# Õ|%î$ Õ|&ïî Õ}î Õ}î  Õ}-î" Õ}/î# Õ}0óî Õ~î Õ~î  Õ~(î, Õ~4î- Õ~5î1 Õ~9î2 Õ~:óî Õî Õî" Õ,î0 Õ:î1 Õ;î; ÕÃEî< ÕÃEóî ÕÄî$ ÕÄî' ÕÄ1î5 ÕÄ?î6 ÕÄÃ@îÃ@ ÕÄÃJîÃA ÕÄÃJïî ÕÅî ÕÅî ÕÅ î" ÕÅ%î# ÕÅ&ïî ÕÇî ÕÇî" ÕÇ%î' ÕÇ*î( ÕÇ+óî ÕÉî ÕÉî ÕÉ,î! ÕÉ3î" ÕÉ4î* ÕÉ<î, ÕÉ>ìî ÕÑî ÕÑî ÕÑîî ÕÖî ÕÖ	î ÕÖî ÕÖîî ÕÜî ÕÜ	î ÕÜî ÕÜîî Õáî Õá	î Õáî Õáñî Õàî Õàî Õàî Õàî Õàî' Õàíî Õâî Õâ‹ î Õäî Õäî Õäî Õäî Õäî  Õäî$ Õäî% Õäî, Õä"î. Õä$î/ Õä%î1 Õä'î5 Õä+î6 Õä,î= Õä3î? Õä5îÃ@ Õä6‹ î Õãî Õãî Õãî Õãî Õãî Õãî  Õãî! Õãî& Õãî( Õãî) Õãî+ Õã!î/ Õã%î0 Õã&î5 Õã+î7 Õã-î8 Õã.î9 Õã/íî Õåî Õåïî Õçî Õçî  Õçî% Õç!î& Õç"ïî Õéî Õéî  Õéî% Õé!î& Õé"íî Õèî Õèïî Õêî Õêî Õêî  Õêî! Õêíî Õëî Õëïî Õíî Õíî Õíî! Õíî" Õííî Õìî Õìïî Õîî Õîî Õîî# Õîî$ Õî íî Õïî Õï‹ î Õñî Õñî Õñ#î! Õñ'î2 Õñ8î3 Õñ9î5 Õñ;î< ÕñÃBî> ÕñÃDî? ÕñÃEîÃA ÕñÃGîÃJ ÕñÃPîÃL ÕñÃRîÃX ÕñÃ^îÃY ÕñÃ_îÃ] ÕñÃcîÃ_ ÕñÃeîÃ` ÕñÃfîÃa ÕñÃfòî Õôî Õôî Õôî Õôî Õôî, Õô&î- Õô'î. Õô'íî Õöî	 Õöîî Õúî Õúî Õúî Õú*óî Õùî Õù
î Õùî Õùî Õùî& Õù î' Õù!îî Õûî Õûî Õûî Õûíî Õüî	 Õüîî Õ°î Õ°î Õ°î Õ°"óî Õ¢î Õ¢
î Õ¢î Õ¢î Õ¢î Õ¢î Õ¢îî Õ£î Õ£î Õ£î Õ£íî Õ§î	 Õ§îî Õ¶î Õ¶î Õ¶î Õ¶)óî Õßî Õß
î Õßî Õßî Õßî Õßî Õßîî Õ®î Õ®î Õ®î Õ®íî Õ©î	 Õ©îî Õ´î Õ´î Õ´î Õ´(óî Õ¨î Õ¨
î Õ¨î Õ¨î Õ¨î Õ¨î Õ¨îî Õ≠î Õ≠î Õ≠î Õ≠íî ÕÆî	 ÕÆîî Õ∞î Õ∞î Õ∞î( Õ∞;óî Õ±î Õ±
î Õ±î Õ±î" Õ±î0 Õ±*î1 Õ±+óî Õ≤î Õ≤
î Õ≤î$ Õ≤î' Õ≤!î5 Õ≤/î6 Õ≤0îî Õ≥î Õ≥î Õ≥î Õ≥íî Õ¥î	 Õ¥îî Õ∂î Õ∂î Õ∂î% Õ∂1óî Õ∑î Õ∑
î Õ∑î Õ∑î" Õ∑î0 Õ∑*î1 Õ∑+îî Õ∏î Õ∏î Õ∏î Õ∏íî Õπî	 Õπîî Õªî Õªî Õªî Õª)óî Õºî Õº
î Õºî Õºî Õºî$ Õºî% Õºòî ÕΩî ÕΩî ÕΩî ÕΩî ÕΩî" ÕΩî# ÕΩî$ ÕΩîî Õæî Õæî Õæî Õæíî Õøî	 Õøîî Õ¡î Õ¡î Õ¡î Õ¡1óî Õ¬î Õ¬
î Õ¬î Õ¬î  Õ¬î# Õ¬î$ Õ¬îî Õ√î Õ√î Õ√î Õ√íî Õƒî	 Õƒñî Õ∆î Õ∆î Õ∆î Õ∆!î Õ∆#î Õ∆3óî Õ«î Õ«
î Õ«î Õ«î Õ«î Õ«î Õ«öî Õ»î Õ»
î Õ»î Õ»î Õ»î Õ»î! Õ»î" Õ»î* Õ»$î, Õ»&ôî Õ…î Õ…î Õ…î Õ…î Õ…î! Õ…î" Õ…î* Õ…"î+ Õ…"ëî Õ öî ÕÀî ÕÀ
î ÕÀî ÕÀî ÕÀî ÕÀî! ÕÀî" ÕÀî* ÕÀ$î, ÕÀ&ôî ÕÃî ÕÃî ÕÃî ÕÃî ÕÃî! ÕÃî" ÕÃî* ÕÃ"î+ ÕÃ"ëî ÕÕîî Õœî Õœ
î Õœî Õœóî Õ–î Õ–î Õ–î Õ–î" Õ–î# Õ–î$ Õ–ëî Õ—ëî Õ—óî Õ“î Õ“î Õ“î Õ“î" Õ“î# Õ“î$ Õ“ëî Õ”óî Õ‘î Õ‘
î Õ‘î Õ‘î Õ‘î" Õ‘î# Õ‘îî Õ’î Õ’î Õ’î Õ’íî Õ÷î	 Õ÷îî Õÿî! Õÿ$î" Õÿ%î. Õÿ9óî ÕŸî ÕŸ
î ÕŸî ÕŸî! ÕŸî- ÕŸ'î. ÕŸ(îî Õ⁄î Õ⁄î Õ⁄î Õ⁄íî Õ€î	 Õ€íî Õ›î Õ›ñî Õﬁî Õﬁî Õﬁî Õﬁî  Õﬁî! Õﬁíî Õﬂî	 Õﬂíî Õ·î Õ·ñî Õ‚î Õ‚î Õ‚î Õ‚î  Õ‚î! Õ‚íî Õ„î	 Õ„íî ÕÂî ÕÂñî ÕÊî ÕÊî ÕÊî ÕÊî  ÕÊî! ÕÊíî ÕÁî	 ÕÁíî ÕÈî ÕÈñî ÕÍî ÕÍî ÕÍî ÕÍî ÕÍî ÕÍíî ÕÎî	 ÕÎîî ÕÌî ÕÌî ÕÌî$ ÕÌ/óî ÕÓî ÕÓ
î ÕÓî ÕÓî ÕÓî( ÕÓ"î) ÕÓ"îî ÕÔî ÕÔî ÕÔî ÕÔíî Õî	 Õîî ÕÚî ÕÚî ÕÚî" ÕÚ-óî ÕÛî ÕÛ
î ÕÛî ÕÛî ÕÛî' ÕÛ!î( ÕÛ!îî ÕÙî ÕÙî ÕÙî ÕÙíî Õıî	 Õıîî Õ˜î Õ˜î Õ˜î$ Õ˜/óî Õ¯î Õ¯
î Õ¯î Õ¯î Õ¯î( Õ¯"î) Õ¯"îî Õ˘î Õ˘î Õ˘î Õ˘íî Õ˙î	 Õ˙òî Õ¸î Õ¸î Õ¸î# Õ¸.î% Õ¸0î0 Õ¸ÃCî2 Õ¸ÃEî> Õ¸ÃYóî Õ˝î Õ˝
î Õ˝î Õ˝î Õ˝î( Õ˝"î) Õ˝"óî Õ˛î Õ˛
î Õ˛î Õ˛î Õ˛î' Õ˛!î( Õ˛!óî Õˇî Õˇ
î Õˇî Õˇî Õˇî( Õˇ"î) Õˇ"îî Õ î Õ î Õ î Õ íî Õî	 Õîî Õî Õî Õî Õ*ôî Õî Õ
î Õî Õî Õî& Õ î) Õ#î, Õ&î- Õ&öî Õî Õ
î Õî Õî Õî# Õî$ Õî/ Õ)î0 Õ*î1 Õ*îî Õî Õî Õî Õíî Õî	 Õîî Õ	î Õ	î Õ	î$ Õ	/ôî Õ
î Õ

î Õ
î Õ
î Õ
î- Õ
'î0 Õ
*î3 Õ
-î4 Õ
-ôî Õî Õ
î Õî Õî Õî! Õî" Õî* Õ$î, Õ&ìî Õ	î Õî Õîî Õ
î Õî Õî Õîî Õ
î Õî Õî Õîî Õ
î Õî Õî Õñî Õ
î Õî Õî Õî Õî' Õ!ìî Õ	î Õ
î Õ
îî Õî Õî Õî Õíî Õî	 Õîî Õî Õî Õî$ Õ/üî Õî Õ
î Õî Õî Õî  Õî$ Õî% Õî0 Õ*î3 Õ-îÃA Õ;îÃB Õ<îÃE Õ?îÃH ÕÃBîÃI ÕÃBôî Õî Õ
î Õî Õî Õî! Õî" Õî* Õ$î, Õ&ìî Õ	î Õî Õîî Õ
î Õî Õî Õîî Õ
î Õî Õî Õîî Õ
î Õî Õî Õñî Õ
î Õî Õî Õî Õî' Õ!ìî Õ	î Õ
î Õ
îî Õî Õî Õî Õíî Õî	 Õòî Õ!î Õ!î Õ!î Õ!&î Õ!(î Õ!1î  Õ!3î! Õ!<óî Õ"î Õ"
î Õ"î Õ"î Õ"î Õ"î Õ"óî Õ#î Õ#
î Õ#î Õ#î Õ#î Õ#î Õ#óî Õ$î Õ$
î Õ$î Õ$î Õ$î Õ$î Õ$îî Õ%î Õ%î Õ%î Õ%íî Õ&î	 Õ&îî Õ(î Õ(î Õ(î Õ((ïî Õ)î Õ)
î Õ)î Õ)î Õ)ôî Õ*î Õ*î Õ*î Õ*î Õ*î! Õ*î" Õ*î* Õ*"î+ Õ*"öî Õ+î Õ+î Õ+î  Õ+î! Õ+î) Õ+!î* Õ+"î. Õ+&î/ Õ+'î0 Õ+'óî Õ,î Õ,î Õ,î Õ,î Õ,î# Õ,î$ Õ,îî Õ-î Õ-î Õ-î Õ-ëî Õ.óî Õ/î Õ/
î Õ/î Õ/î Õ/î" Õ/î# Õ/îî Õ0î Õ0î Õ0î Õ0íî Õ1î	 Õ1íî Õ3î Õ3ñî Õ4î Õ4î Õ4î Õ4î Õ4î Õ4íî Õ5î	 Õ5ñî Õ7î Õ7î Õ7î Õ7(î Õ7*î% Õ78óî Õ8î Õ8
î Õ8î Õ8î Õ8î! Õ8î" Õ8óî Õ9î Õ9
î Õ9î Õ9î Õ9î! Õ9î" Õ9îî Õ:î Õ:î Õ:î Õ:íî Õ;î	 Õ;îî Õ=î Õ=î Õ=î# Õ=7óî Õ>î Õ>
î Õ>î Õ>î! Õ>î) Õ>#î* Õ>$îî Õ?î Õ?î Õ?î Õ?íî Õ@î	 Õ@îî ÕBî ÕB!î ÕB"î' ÕB?óî ÕCî ÕC
î ÕCî" ÕCî% ÕCî- ÕC'î. ÕC(îî ÕDî ÕDî ÕDî ÕDíî ÕEî	 ÕEîî ÕGî! ÕG$î" ÕG%î* ÕGÃFóî ÕHî ÕH
î ÕHî& ÕH î) ÕH#î1 ÕH+î2 ÕH,îî ÕIî ÕIî ÕIî ÕIíî ÕJî	 ÕJîî ÕLî ÕL î ÕL!î& ÕL=óî ÕMî ÕM
î ÕMî! ÕMî$ ÕMî, ÕM&î- ÕM'îî ÕNî ÕNî ÕNî ÕNíî ÕOî	 ÕOîî ÕQî ÕQî ÕQ î% ÕQ;óî ÕRî ÕR
î ÕRî  ÕRî# ÕRî+ ÕR%î, ÕR&îî ÕSî ÕSî ÕSî ÕSíî ÕTî	 ÕTîî ÕVî ÕV î ÕV!î& ÕV=óî ÕWî ÕW
î ÕWî! ÕWî$ ÕWî, ÕW&î- ÕW'îî ÕXî ÕXî ÕXî ÕXíî ÕYî	 ÕYîî Õ[î  Õ[#î! Õ[$î4 Õ[ÃOóî Õ\î Õ\
î Õ\î$ Õ\î' Õ\!î: Õ\4î; Õ\5îî Õ]î Õ]î Õ]î Õ]íî Õ^î	 Õ^îî Õ`î$ Õ`'î% Õ`(î< Õ`ÃZóî Õaî Õa
î Õaî( Õa"î+ Õa%îÃB Õa<îÃC Õa=îî Õbî Õbî Õbî Õbíî Õcî	 Õcîî Õeî Õe!î Õe"î2 ÕeÃJóî Õfî Õf
î Õfî" Õfî% Õfî8 Õf2î9 Õf3îî Õgî Õgî Õgî Õgíî Õhî	 Õhîî Õjî Õjî Õjî* Õj>óî Õkî Õk
î Õkî  Õkî# Õkî2 Õk,î3 Õk-îî Õlî Õlî Õlî Õlíî Õmî	 Õmíî Õoî Õoòî Õpî Õp
î Õpî Õpî Õpî Õpî Õpî Õpòî Õqî Õqî  Õqî# Õq#î' Õq'î( Õq(î6 Õq6î7 Õq7òî Õrî Õrî Õrî" Õr"î& Õr&î' Õr'î5 Õr5î6 Õr6òî Õsî Õsî! Õsî$ Õs$î( Õs(î) Õs)î5 Õs5î6 Õs6òî Õtî Õtî" Õtî% Õt%î) Õt)î* Õt*î7 Õt7î8 Õt8öî Õvî Õvî! Õvî$ Õv$î/ Õv/î2 Õv2î6 Õv6î7 Õv7î< Õv<î= Õv=öî Õwî Õwî" Õwî% Õw%î1 Õw1î4 Õw4î8 Õw8î9 Õw9î> Õw>î? Õw?úî Õyî Õyî# Õyî& Õyî' Õyî2 Õy*î5 Õy-îÃ@ Õy8îÃA Õy9îÃD Õy<îÃE Õy=îÃF Õy>úî Õzî Õzî# Õzî& Õzî' Õzî3 Õz+î6 Õz.îÃB Õz:îÃC Õz;îÃF Õz>îÃG Õz?îÃH ÕzÃ@üî Õ|î Õ|î Õ|î Õ|î Õ|î Õ|î! Õ|î+ Õ|#î. Õ|&î2 Õ|*î3 Õ|+î: Õ|2î= Õ|5îÃJ Õ|ÃBîÃK Õ|ÃCüî Õ}î Õ}î Õ}î Õ}î Õ}î Õ}î  Õ}î) Õ}!î, Õ}$î0 Õ}(î1 Õ})î8 Õ}0î; Õ}3îÃH Õ}Ã@îÃI Õ}ÃA‹ î Õ~î Õ~î Õ~î Õ~î Õ~î Õ~î" Õ~î& Õ~î' Õ~î+ Õ~#î, Õ~$î0 Õ~(î3 Õ~+î> Õ~6îÃA Õ~9îÃN Õ~ÃFîÃO Õ~ÃG‹ î Õî Õî Õî Õî Õî  Õî# Õî' Õî( Õ î, Õ$î- Õ%î0 Õ(î3 Õ+î? Õ7îÃB Õ:îÃO ÕÃGîÃP ÕÃHëî ÕÅõî ÕÉî ÕÉ
î ÕÉî ÕÉî  ÕÉî$ ÕÉî% ÕÉî) ÕÉ#î* ÕÉ$î1 ÕÉ+î3 ÕÉ-íî ÕÑî$ ÕÑíî ÕÖî$ ÕÖöî ÕÜî ÕÜî ÕÜî ÕÜî ÕÜî" ÕÜî& ÕÜî' ÕÜî/ ÕÜ'î1 ÕÜ)óî Õá
î Õáî Õáî Õáî Õáî& Õáî( Õáòî Õàî Õàî  Õàî# Õàî$ ÕàîÃn ÕàÃbîÃo ÕàÃcîÃp ÕàÃdûî Õâî Õâî Õâî. Õâ"î/ Õâ#î; Õâ/î< Õâ0îÃ@ Õâ4îÃB Õâ6îÃP ÕâÃDîÃQ ÕâÃEîÃ[ ÕâÃOîÃ\ ÕâÃPîÃ] ÕâÃPëî Õäëî Õäòî Õãî Õãî  Õãî# Õãî$ ÕãîÃl ÕãÃ`îÃm ÕãÃaîÃn ÕãÃbûî Õåî Õåî Õåî. Õå"î/ Õå#î; Õå/î< Õå0îÃ@ Õå4îÃB Õå6îÃP ÕåÃDîÃQ ÕåÃEîÃY ÕåÃMîÃZ ÕåÃNîÃ[ ÕåÃNëî Õçëî Õé	ëî Õéòî Õè
î Õèî Õèî Õèî  ÕèîÃc ÕèÃYîÃd ÕèÃZîÃe ÕèÃ[ûî Õê
î Õêî Õêî* Õê î+ Õê!î7 Õê-î8 Õê.î; Õê1î= Õê3îÃK ÕêÃAîÃL ÕêÃBîÃP ÕêÃFîÃQ ÕêÃGîÃR ÕêÃGëî Õë	ëî Õíôî Õîî Õî
î Õîî Õîî Õîî! Õîî" Õîî* Õî$î, Õî&ìî Õï	î Õïî Õïîî Õñ
î Õñî Õñî Õñîî Õó
î Õóî Õóî Õóîî Õò
î Õòî Õòî Õòñî Õô
î Õôî Õôî Õôî Õôî' Õô!íî Õö	î Õö
‹ î Õõ	î Õõî Õõî Õõî Õõî  Õõî$ Õõî% Õõî, Õõ$î. Õõ&î/ Õõ'î1 Õõ)î5 Õõ-î6 Õõ.î= Õõ5î? Õõ7îÃ@ Õõ8îÃB Õõ:îÃC Õõ;îÃE Õõ=îÃF Õõ>ìî Õú	î Õúî Õúñî Õù
î Õùî Õùî Õùî Õùî Õùñî Õû
î Õûî Õûî Õûî Õûî Õûñî Õü
î Õüî Õüî Õüî Õüî% Õüñî Õ†
î Õ†î Õ†î Õ†î Õ†î% Õ†ìî Õ°	î Õ°
î Õ°
òî Õ¢î Õ¢
î Õ¢î Õ¢î$ Õ¢î( Õ¢"î, Õ¢&î. Õ¢(úî Õ£î Õ£î Õ£î$ Õ£î% Õ£î4 Õ£,î5 Õ£-î9 Õ£1î: Õ£2îÃC Õ£;îÃD Õ£<îÃE Õ£<ëî Õ§íî Õ•î	 Õ•íî Õßî Õßòî Õ®î Õ®î Õ®î& Õ®7î( Õ®9î6 Õ®ÃXî8 Õ®ÃZîÃ@ Õ®Ãlöî Õ©î Õ©
î Õ©î Õ©î Õ©î' Õ©!î( Õ©"î4 Õ©.î5 Õ©/î6 Õ©/ñî Õ™î Õ™
î Õ™î# Õ™î, Õ™&î. Õ™(óî Õ´î Õ´î Õ´î# Õ´î& Õ´î4 Õ´,î5 Õ´,ñî Õ¨î Õ¨î Õ¨î! Õ¨î* Õ¨"î, Õ¨$óî Õ≠
î Õ≠î Õ≠î! Õ≠î$ Õ≠î, Õ≠"î- Õ≠"ëî ÕÆ	óî ÕØî ÕØî ÕØî ÕØî ÕØî% ÕØî' ÕØóî Õ∞
î Õ∞î Õ∞î$ Õ∞î' Õ∞î+ Õ∞!î, Õ∞!ëî Õ±	ëî Õ≤ëî Õ≤óî Õ≥î Õ≥î Õ≥î  Õ≥î# Õ≥î( Õ≥ î) Õ≥!ôî Õ¥î Õ¥î Õ¥î# Õ¥î& Õ¥î4 Õ¥,î5 Õ¥-î9 Õ¥1î: Õ¥2ëî Õµîî Õ∂î Õ∂î Õ∂î Õ∂íî Õ∑î	 Õ∑íî Õπî Õπóî Õ∫î Õ∫
î Õ∫î Õ∫î Õ∫î Õ∫î Õ∫óî Õªî Õª
î Õªî Õªî  Õªî! Õªî" Õªóî Õºî Õº
î Õºî Õºî Õºî Õºî Õºóî ÕΩî ÕΩ
î ÕΩî ÕΩî ÕΩî ÕΩî ÕΩóî Õæî Õæ
î Õæî Õæî Õæî Õæî Õæóî Õøî Õø
î Õøî Õøî Õøî Õøî Õøóî Õ¿î Õ¿
î Õ¿î Õ¿î Õ¿î  Õ¿î! Õ¿ôî Õ¡î Õ¡
î Õ¡î Õ¡î  Õ¡î, Õ¡&î- Õ¡'î1 Õ¡+î2 Õ¡,ôî Õ¬î Õ¬
î Õ¬î Õ¬î" Õ¬î& Õ¬ î' Õ¬!î: Õ¬4î; Õ¬5ñî Õ√î Õ√
î Õ√î Õ√î Õ√î  Õ√íî Õƒî	 Õƒîî Õ∆î Õ∆î Õ∆î Õ∆'ïî Õ«î Õ«
î Õ«î Õ«î Õ«íî Õ»î	 Õ»îî Õ î Õ î Õ î Õ 7óî ÕÀî ÕÀ
î ÕÀî ÕÀî ÕÀî  ÕÀî! ÕÀîî ÕÃî ÕÃî ÕÃî ÕÃíî ÕÕî	 ÕÕíî Õœî Õœòî Õ–î Õ–î Õ–î Õ–î Õ–î! Õ–î" Õ–î# Õ–íî Õ—î	 Õ—íî Õ”î Õ”ûî Õ‘î Õ‘î Õ‘î Õ‘î Õ‘î# Õ‘î$ Õ‘î( Õ‘"î, Õ‘&î- Õ‘'î4 Õ‘.î8 Õ‘2î9 Õ‘3î: Õ‘4íî Õ’î	 Õ’íî Õ◊î Õ◊ñî Õÿî Õÿî Õÿî Õÿî Õÿî Õÿíî ÕŸî	 ÕŸñî Õ€î Õ€î Õ€î Õ€$î Õ€&î" Õ€5‹ î Õ‹î Õ‹
î Õ‹î Õ‹î Õ‹î" Õ‹î# Õ‹î/ Õ‹)î2 Õ‹,î6 Õ‹0î7 Õ‹1î< Õ‹6î? Õ‹9îÃC Õ‹=îÃD Õ‹>îÃR Õ‹ÃLîÃS Õ‹ÃMîÃV Õ‹ÃPîÃW Õ‹ÃQîÃZ Õ‹ÃTîÃ^ Õ‹ÃXîÃ_ Õ‹ÃYîÃd Õ‹Ã^îÃg Õ‹ÃaîÃi Õ‹ÃcîÃj Õ‹Ãd‹ î Õ›î Õ›
î Õ›î Õ›î Õ›î" Õ›î# Õ›î0 Õ›*î3 Õ›-î7 Õ›1î8 Õ›2î= Õ›7îÃ@ Õ›:îÃD Õ›>îÃE Õ›?îÃT Õ›ÃNîÃU Õ›ÃOîÃX Õ›ÃRîÃY Õ›ÃSîÃ\ Õ›ÃVîÃ` Õ›ÃZîÃa Õ›Ã[îÃf Õ›Ã`îÃi Õ›ÃcîÃk Õ›ÃeîÃl Õ›Ãföî Õﬁî Õﬁî Õﬁî Õﬁî Õﬁî+ Õﬁ%î. Õﬁ(î8 Õﬁ2î9 Õﬁ3î: Õﬁ4ûî Õﬂî Õﬂ
î Õﬂî Õﬂî! Õﬂî$ Õﬂî( Õﬂ"î) Õﬂ#î. Õﬂ(î1 Õﬂ+î5 Õﬂ/î6 Õﬂ0îÃD Õﬂ>îÃF ÕﬂÃ@óî Õ‡î Õ‡î Õ‡î Õ‡î Õ‡î& Õ‡î' Õ‡òî Õ·î Õ·î Õ·î Õ·î  Õ·î# Õ·î- Õ·%î/ Õ·'íî Õ‚
î Õ‚óî Õ„
î Õ„î Õ„î  Õ„î# Õ„î- Õ„#î. Õ„$óî Õ‰
î Õ‰î Õ‰î% Õ‰î( Õ‰î, Õ‰"î- Õ‰#ëî ÕÂ	ôî ÕÂî ÕÂî ÕÂî ÕÂî% ÕÂî( ÕÂ"î) ÕÂ#î3 ÕÂ-î5 ÕÂ/íî ÕÊ
î ÕÊòî ÕÁ
î ÕÁî ÕÁî  ÕÁî# ÕÁî$ ÕÁî. ÕÁ$î/ ÕÁ%óî ÕË
î ÕËî ÕËî% ÕËî( ÕËî, ÕË"î- ÕË#ëî ÕÈ	ëî ÕÍûî ÕÏî ÕÏ
î ÕÏî ÕÏî" ÕÏî% ÕÏî) ÕÏ#î* ÕÏ$î/ ÕÏ)î2 ÕÏ,î6 ÕÏ0î7 ÕÏ1îÃF ÕÏÃ@îÃH ÕÏÃBóî ÕÌî ÕÌî ÕÌî ÕÌî ÕÌî& ÕÌî' ÕÌòî ÕÓî ÕÓî ÕÓî ÕÓî  ÕÓî# ÕÓî- ÕÓ%î/ ÕÓ'óî ÕÔ
î ÕÔî ÕÔî  ÕÔî# ÕÔî- ÕÔ#î. ÕÔ$óî Õ
î Õî Õî% Õî( Õî, Õ"î- Õ#ëî ÕÒ	ôî ÕÒî ÕÒî ÕÒî ÕÒî% ÕÒî( ÕÒ"î) ÕÒ#î3 ÕÒ-î5 ÕÒ/òî ÕÚ
î ÕÚî ÕÚî  ÕÚî# ÕÚî$ ÕÚî. ÕÚ$î/ ÕÚ%óî ÕÛ
î ÕÛî ÕÛî% ÕÛî( ÕÛî, ÕÛ"î- ÕÛ#ëî ÕÙ	ëî Õıñî Õˆî Õˆ
î Õˆî Õˆî Õˆî  Õˆíî Õ˜î	 Õ˜íî Õ¯î Õ¯ëî ÕOíî ÕOî ÕO
ëî& ÕO!ëî ÕPíî ÕPî ÕP
ëî) ÕPëî ÕQíî ÕQî ÕQ
ëî* ÕQëî ÕRíî ÕRî ÕR
ëî1 ÕR&ëî ÕSíî ÕSî ÕS
ëî2 ÕS'ëî ÕTíî ÕTî ÕT
ëî, ÕT ëî ÕUíî ÕUî ÕU
ëî. ÕU"ëî ÕVíî ÕVî ÕV
ëî( ÕVëî ÕWíî ÕWî ÕW
ëî/ ÕW#ëî ÕXíî ÕXî ÕX
ëî* ÕX#ëî ÕYíî ÕYî ÕY
ëî+ ÕY1ëî ÕZíî ÕZî ÕZ
ëî+ ÕZ!ëî Õ[íî Õ[î Õ[
ëî+ Õ[ëî Õ\íî Õ\î Õ\
ëî+ Õ\!ëî Õ]íî Õ]î Õ]
ëî) Õ]!ëî Õ^íî Õ^î Õ^
ëî* Õ^ëî Õ_íî Õ_î Õ_
ëî* Õ_ëî Õ`íî Õ`î Õ`
ëî* Õ`ëî Õaíî Õaî Õa
ëî* Õaëî Õbíî Õbî Õb
ëî* Õbëî Õcíî Õcî Õc
ëî- Õc!ëî Õdíî Õdî Õd
ëî- Õd!ëî Õeíî Õeî Õe
ëî. Õe(ëî Õgíî Õgî Õg
ëî/ Õg%ëî Õhíî Õhî Õh
ëî/ Õh%ëî Õsíî Õsî Õs
ëî' Õs%ëî Õtíî Õtî Õt
ëî- Õt!ëî Õuíî Õuî Õu
ëî0 Õu'ëî Õvíî Õvî Õv
ëî0 Õv%ëî Õwíî Õwî Õw
ëî, Õw&ëî Õxíî Õxî Õx
ëî+ Õx%ëî Õyíî Õyî Õy
ëî0 Õy%ëî Õzíî Õzî Õz
ëî/ Õz$ëî Õ{íî Õ{î Õ{
ëî1 Õ{&ëî Õ|íî Õ|î Õ|
ëî1 Õ|&ëî Õ}íî Õ}î Õ}
ëî/ Õ}0ëî Õ~íî Õ~î Õ~
ëî/ Õ~:ëî Õíî Õî Õ
ëî1 ÕÃEëî ÕÄíî ÕÄî ÕÄ
ëî6 ÕÄÃJëî ÕÅíî ÕÅî ÕÅ
ëî, ÕÅ&ëî ÕÇíî ÕÇî ÕÇ
ëî1 ÕÇ+ëî ÕÉíî ÕÉî ÕÉ
ëî) Õã/íî ÕNî	 ÕNíî ÕMî ÕMìî ÕNî ÕNî Õ¯îî ÕNî ÕNî Õ¯î Õ¯óî  Õ˘ î Õ˘î ÕL
î ÕLî ÕL
î ÕLî" Õ˘ñî  Õ˚ î Õ˚î	 Õ˚	î Õ˚î Õ˚î Õ˚‘rGñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹ëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ëî  ÃØ ëî  Ã∞ ëî  Ã± ëî  Ã≤ ëî  Ã≥ ëî  Ã¥ ëî  Ãµ ëî  Ã∂ ëî  Ã∑ ëî  Ã∏ ëî  Ãπ ëî  Ã∫ ëî  Ãª ëî  Ãº ëî  ÃΩ ëî  Ãæ ëî  Ãø ëî  Ã¿ ëî  Ã¡ ëî  Ã¬ ëî  Ã√ ëî  Ãƒ ëî  Ã≈ ëî  Ã∆ ëî  Ã« ëî  Ã» ëî  Ã… ëî  Ã  ëî  ÃÀ ëî  ÃÃ ëî  ÃÕ ëî  ÃŒ ëî  Ãœ ëî  Ã– ëî  Ã— ëî  Ã“ ëî  Ã” ëî  Ã‘ ëî  Ã’ ëî  Ã÷ ëî  Ã◊ ëî  Ãÿ ëî  ÃŸ ëî  Ã⁄ ëî  Ã€ ëî  Ã‹ ëî  Ã› ëî  Ãﬁ ëî  Ãﬂ ëî  Ã‡ ëî  Ã· ëî  Ã‚ ëî  Ã„ ëî  Ã‰ ëî  ÃÂ ëî  ÃÊ ëî  ÃÁ ëî  ÃË ëî  ÃÈ ëî  ÃÍ ëî  ÃÎ ëî  ÃÏ ëî  ÃÌ ëî  ÃÓ ëî  ÃÔ ëî  Ã ëî  ÃÒ ëî  ÃÚ ëî  ÃÛ ëî  ÃÙ ëî  Ãı ëî  Ãˆ ëî  Ã˜ ëî  Ã¯ ëî  Ã˘ ëî  Ã˙ ëî  Ã˚ ëî  Ã¸ ëî  Ã˝ ëî  Ã˛ ëî  Ãˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ëî  Õ¡ ëî  Õ¬ ëî  Õ√ ëî  Õƒ ëî  Õ≈ ëî  Õ∆ ëî  Õ« ëî  Õ» ëî  Õ… ëî  Õ  ëî  ÕÀ ëî  ÕÃ ëî  ÕÕ ëî  ÕŒ ëî  Õœ ëî  Õ– ëî  Õ— ëî  Õ“ ëî  Õ” ëî  Õ‘ ëî  Õ’ ëî  Õ÷ ëî  Õ◊ ëî  Õÿ ëî  ÕŸ ëî  Õ⁄ ëî  Õ€ ëî  Õ‹ ëî  Õ› ëî  Õﬁ ëî  Õﬂ ëî  Õ‡ ëî  Õ· ëî  Õ‚ ëî  Õ„ ëî  Õ‰ ëî  ÕÂ ëî  ÕÊ ëî  ÕÁ ëî  ÕË ëî  ÕÈ ëî  ÕÍ ëî  ÕÎ ëî  ÕÏ ëî  ÕÌ ëî  ÕÓ ëî  ÕÔ ëî  Õ ëî  ÕÒ ëî  ÕÚ ëî  ÕÛ ëî  ÕÙ ëî  Õı ëî  Õˆ ëî  Õ˜ ëî  Õ¯ ëî  Õ˘ ëî  Õ˙ ëî  Õ˚ ëî  Õ¸ ëî  Õ˝ ëî  Õ˛ ëî  Õˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ  ëî  Õ! ëî  Õ" ëî  Õ# ëî  Õ$ ëî  Õ% ëî  Õ& ëî  Õ' ëî  Õ( ëî  Õ) ëî  Õ* ëî  Õ+ ëî  Õ, ëî  Õ- ëî  Õ. ëî  Õ/ ëî  Õ0 ëî  Õ1 ëî  Õ2 ëî  Õ3 ëî  Õ4 ëî  Õ5 ëî  Õ6 ëî  Õ7 ëî  Õ8 ëî  Õ9 ëî  Õ: ëî  Õ; ëî  Õ< ëî  Õ= ëî  Õ> ëî  Õ? ëî  Õ@ ëî  ÕA ëî  ÕB ëî  ÕC ëî  ÕD ëî  ÕE ëî  ÕF ëî  ÕG ëî  ÕH ëî  ÕI ëî  ÕJ ëî  ÕK ëî  ÕL ëî  ÕM ëî  ÕN ëî  ÕO ëî  ÕP ëî  ÕQ ëî  ÕR ëî  ÕS ëî  ÕT ëî  ÕU ëî  ÕV ëî  ÕW ëî  ÕX ëî  ÕY ëî  ÕZ ëî  Õ[ ëî  Õ\ ëî  Õ] ëî  Õ^ ëî  Õ_ ëî  Õ` ëî  Õa ëî  Õb ëî  Õc ëî  Õd ëî  Õe ëî  Õf ëî  Õg ëî  Õh ëî  Õi ëî  Õj ëî  Õk ëî  Õl ëî  Õm ëî  Õn ëî  Õo ëî  Õp ëî  Õq ëî  Õr ëî  Õs ëî  Õt ëî  Õu ëî  Õv ëî  Õw ëî  Õx ëî  Õy ëî  Õz ëî  Õ{ ëî  Õ| ëî  Õ} ëî  Õ~ ëî  Õ ëî  ÕÄ ëî  ÕÅ ëî  ÕÇ ëî  ÕÉ ëî  ÕÑ ëî  ÕÖ ëî  ÕÜ ëî  Õá ëî  Õà ëî  Õâ ëî  Õä ëî  Õã ëî  Õå ëî  Õç ëî  Õé ëî  Õè ëî  Õê ëî  Õë ëî  Õí ëî  Õì ëî  Õî ëî  Õï ëî  Õñ ëî  Õó ëî  Õò ëî  Õô ëî  Õö ëî  Õõ ëî  Õú ëî  Õù ëî  Õû ëî  Õü ëî  Õ† ëî  Õ° ëî  Õ¢ ëî  Õ£ ëî  Õ§ ëî  Õ• ëî  Õ¶ ëî  Õß ëî  Õ® ëî  Õ© ëî  Õ™ ëî  Õ´ ëî  Õ¨ ëî  Õ≠ ëî  ÕÆ ëî  ÕØ ëî  Õ∞ ëî  Õ± ëî  Õ≤ ëî  Õ≥ ëî  Õ¥ ëî  Õµ ëî  Õ∂ ëî  Õ∑ ëî  Õ∏ ëî  Õπ ëî  Õ∫ ëî  Õª ëî  Õº ëî  ÕΩ ëî  Õæ ëî  Õø ëî  Õ¿ ëî  Õ¡ ëî  Õ¬ ëî  Õ√ ëî  Õƒ ëî  Õ≈ ëî  Õ∆ ëî  Õ« ëî  Õ» ëî  Õ… ëî  Õ  ëî  ÕÀ ëî  ÕÃ ëî  ÕÕ ëî  ÕŒ ëî  Õœ ëî  Õ– ëî  Õ— ëî  Õ“ ëî  Õ” ëî  Õ‘ ëî  Õ’ ëî  Õ÷ ëî  Õ◊ ëî  Õÿ ëî  ÕŸ ëî  Õ⁄ ëî  Õ€ ëî  Õ‹ ëî  Õ› ëî  Õﬁ ëî  Õﬂ ëî  Õ‡ ëî  Õ· ëî  Õ‚ ëî  Õ„ ëî  Õ‰ ëî  ÕÂ ëî  ÕÊ ëî  ÕÁ ëî  ÕË ëî  ÕÈ ëî  ÕÍ ëî  ÕÎ ëî  ÕÏ ëî  ÕÌ ëî  ÕÓ ëî  ÕÔ ëî  Õ ëî  ÕÒ ëî  ÕÚ ëî  ÕÛ ëî  ÕÙ ëî  Õı ëî  Õˆ ëî  Õ˜ ëî  Õ¯ ëî  Õ˘ ëî  Õ˙ ëî  Õ˚ ëî  Õ¸ ëî  Õ˝ ëî  Õ˛ ëî  Õˇ ëî  Õ  ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ	 ëî  Õ
 ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ëî  Õ ¬ê‘  ‘rHî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêë‘rIñ§type•start£end´declaration™specifiers¶source∂ExportNamedDeclarationÕv˙Õw¿ë‘rJï§type•start£end•local®exportedØExportSpecifierÕwÕw‘rKî§type•start£end§name™IdentifierÕwÕw©PhotoViewK™IdentifierÕwÕw©PhotoView¿í‘rLï§type•start£end™specifiers¶source±ImportDeclarationÕ0ÕTë‘rMî§type•start£end•local∂ImportDefaultSpecifierÕ7Õ>K™IdentifierÕ7Õ>ßMatrix4‘rNï§type•start£end•value£rawßLiteralÕDÕS≠@ohos.matrix4Ø'@ohos.matrix4'L±ImportDeclarationÕVÕrëM∂ImportDefaultSpecifierÕ]ÕbK™IdentifierÕ]Õb•RectFNßLiteralÕhÕqß./RectF©'./RectF'